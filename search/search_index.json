{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]"},"docs":[{"location":"","text":"Welcome To Autotelegram Documentation! 1 min read If your reading this documentation, our autotelegram team from Open Source Community Kampala Chapter is welcoming you to one of our first community open source projects. To get more updates as they come, you can catch us on our various social platforms. check out our socials by clicking any of the links below. You can also check out this project's repository on github and give us a star if you find it helpful. What Is Autotelegram? 1 min read Autotelegram is a python telegram bot library targetted to help you build telegram bots with simplicity and ease of use in mind. The project is under active development and still in beta stages. To contribute to the project, please follow along with the issues being posted and also the discussions. Contributing Autotelegram accepts contributions from the community. To know more about how to contribute, read through the contributing page . License Sponsorships Autotelegram is built by developers from the open source community of kampala and various other contributors. To support this project and other incubator projects in OSC-Kampala, please consider sponsoring. How to sponsor Requirements 1 min read What you need to run Autotelegram. You don't have to manually install all these, they shall be automatically installed for you. Just copy and paste the code snippet below in your command line or terminal and you're good to go. > Note: autotelegram only supports python 3.10 and above pip install https : // github . com / OSCA - Kampala - Chapter / autotelegram / archive / refs / tags / autotelegram - 0.3 - beta . zip Syntax Version Info (Description) certifi 2022.9.24 it identifies the holder and provides other important information. installation-guide-here charset-normalizer 2.1.1 A library that helps you read text from an unknown charset encoding. installation-guide-here click 8.1.3 package for creating beautiful command line interfaces in a composable way with as ittle code as necessary. It\u2019s the \u201cCommand Line Interface Creation Kit\u201d. installation-guide-here ghp-import 2.1.0 The ghp-import output command updates the local gh-pages branch with the content of the output directory (creating the branch if it doesn't already exist). installation-guide-here griffe 0.23.0 Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation. installation-guide-here idna 3.4 Support for the Internationalized Domain Names in Applications (IDNA) protocol as specified in RFC 5891. This is the latest version of the protocol and is sometimes referred to as \u201cIDNA 2008\u201d. installation-guide-here importlib-metadata 5.0.0 Library to access the metadata for a Python package. This package supplies third-party access to the functionality of importlib.metadata including improvements added to subsequent Python version. installation-guide-here Jinja2 3.1.2 Jinja is a fast, expressive, extensible templating engine. Special placeholders in the template allow writing code similar to Python syntax. Then the template is passed data to render the final document. installation-guide-here Markdown 3.3.7 This is a Python implementation of John Gruber's Markdown. It is almost completely compliant with the reference implementation, though there are a few known issues. installation-guide-here MarkupSafe 2.1.1 MarkupSafe implements a text object that escapes characters so it is safe to use in HTML and XML. Characters that have special meanings are replaced so that they display as the actual characters. installation-guide-here mergedeep 1.3.4 A deep merge function for \ud83d\udc0d. installation-guide-here mkdocs 0.4.1 MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. installation-guide-here mkdocs-autorefs 0.4.1 Automatically link across pages in MkDocs. installation-guide-here mkdocs-material 8.5.7 Write your documentation in Markdown and create a professional static site for your Open Source or commercial project in minutes \u2013 searchable, customizable, more than 50 languages, for all devices. installation-guide-here mkdocs-material-extensions 1.1 Markdown extension resources for MkDocs for Material installation-guide-here mkdocstrings 0.19.0 Automatic documentation from sources, for MkDocs. installation-guide-here mkdocstrings-python 0.7.1 It is a python handler for mkdocstrings. installation-guide-here packaging 21.3 This library provides utilities that implement the interoperability specifications which have clearly one correct behaviour (eg: PEP 440) or benefit greatly from having a single shared implementation (eg: PEP 425). installation-guide-here pygments 2.13.0 This library provides utilities that implement the interoperability specifications which have clearly one correct behaviour (eg: PEP 440) or benefit greatly from having a single shared implementation (eg: PEP 425). installation-guide-here pymdown-extensions 9.7 Extensions for Python Markdown. installation-guide-here pyparsing 3.0.9 pyparsing module - Classes and methods to define and execute parsing grammars. installation-guide-here python-dateutil 2.8.2 Extensions to the standard Python datetime module The dateutil module provides powerful extensions to the standard datetime module, available in Python. installation-guide-here PyYAML 6.0 YAML is a data serialization format designed for human readability and interaction with scripting languages. PyYAML is a YAML parser and emitter for Python installation-guide-here pyyaml-env-tag 0.1 A custom YAML tag for referencing environment variables in YAML files. installation-guide-here requests 2.28.1 Python HTTP for Humans. installation-guide-here six 1.16.0 Six is a Python 2 and 3 compatibility library. It provides utility functions for smoothing over the differences between the Python versions with the goal of writing Python code that is compatible on both Python versions. See the documentation for more information on what is provided. installation-guide-here urlib3 1.26.12 urllib3 is one of the most downloaded packages on PyPI and is a dependency of many popular Python packages like Requests, Pip, and more! urllib3 is powerful and easy to use: installation-guide-here watchdog 2.1.9 Python API and shell utilities to monitor file system events Works on 3.6+. If you want to use Python 2.6, you should stick with watchdog < 0.10.0 If you want to use Python 2.7, 3.4 or 3.5, you should stick with watchdog < 1.0.0, installation-guide here zipp 3.10.0 A pathlib-compatible Zipfile object wrapper. Official backport of the standard library Path object. installation-guide-here","title":"Home"},{"location":"#welcome-to-autotelegram-documentation","text":"1 min read If your reading this documentation, our autotelegram team from Open Source Community Kampala Chapter is welcoming you to one of our first community open source projects. To get more updates as they come, you can catch us on our various social platforms. check out our socials by clicking any of the links below. You can also check out this project's repository on github and give us a star if you find it helpful.","title":"Welcome To Autotelegram Documentation!"},{"location":"#what-is-autotelegram","text":"1 min read Autotelegram is a python telegram bot library targetted to help you build telegram bots with simplicity and ease of use in mind. The project is under active development and still in beta stages. To contribute to the project, please follow along with the issues being posted and also the discussions.","title":"What Is Autotelegram?"},{"location":"#contributing","text":"Autotelegram accepts contributions from the community. To know more about how to contribute, read through the contributing page .","title":"Contributing"},{"location":"#license","text":"","title":"License"},{"location":"#sponsorships","text":"Autotelegram is built by developers from the open source community of kampala and various other contributors. To support this project and other incubator projects in OSC-Kampala, please consider sponsoring.","title":"Sponsorships"},{"location":"#how-to-sponsor","text":"","title":"How to sponsor"},{"location":"#requirements","text":"1 min read What you need to run Autotelegram. You don't have to manually install all these, they shall be automatically installed for you. Just copy and paste the code snippet below in your command line or terminal and you're good to go.","title":"Requirements"},{"location":"#note-autotelegram-only-supports-python-310-and-above","text":"pip install https : // github . com / OSCA - Kampala - Chapter / autotelegram / archive / refs / tags / autotelegram - 0.3 - beta . zip Syntax Version Info (Description) certifi 2022.9.24 it identifies the holder and provides other important information. installation-guide-here charset-normalizer 2.1.1 A library that helps you read text from an unknown charset encoding. installation-guide-here click 8.1.3 package for creating beautiful command line interfaces in a composable way with as ittle code as necessary. It\u2019s the \u201cCommand Line Interface Creation Kit\u201d. installation-guide-here ghp-import 2.1.0 The ghp-import output command updates the local gh-pages branch with the content of the output directory (creating the branch if it doesn't already exist). installation-guide-here griffe 0.23.0 Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation. installation-guide-here idna 3.4 Support for the Internationalized Domain Names in Applications (IDNA) protocol as specified in RFC 5891. This is the latest version of the protocol and is sometimes referred to as \u201cIDNA 2008\u201d. installation-guide-here importlib-metadata 5.0.0 Library to access the metadata for a Python package. This package supplies third-party access to the functionality of importlib.metadata including improvements added to subsequent Python version. installation-guide-here Jinja2 3.1.2 Jinja is a fast, expressive, extensible templating engine. Special placeholders in the template allow writing code similar to Python syntax. Then the template is passed data to render the final document. installation-guide-here Markdown 3.3.7 This is a Python implementation of John Gruber's Markdown. It is almost completely compliant with the reference implementation, though there are a few known issues. installation-guide-here MarkupSafe 2.1.1 MarkupSafe implements a text object that escapes characters so it is safe to use in HTML and XML. Characters that have special meanings are replaced so that they display as the actual characters. installation-guide-here mergedeep 1.3.4 A deep merge function for \ud83d\udc0d. installation-guide-here mkdocs 0.4.1 MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. installation-guide-here mkdocs-autorefs 0.4.1 Automatically link across pages in MkDocs. installation-guide-here mkdocs-material 8.5.7 Write your documentation in Markdown and create a professional static site for your Open Source or commercial project in minutes \u2013 searchable, customizable, more than 50 languages, for all devices. installation-guide-here mkdocs-material-extensions 1.1 Markdown extension resources for MkDocs for Material installation-guide-here mkdocstrings 0.19.0 Automatic documentation from sources, for MkDocs. installation-guide-here mkdocstrings-python 0.7.1 It is a python handler for mkdocstrings. installation-guide-here packaging 21.3 This library provides utilities that implement the interoperability specifications which have clearly one correct behaviour (eg: PEP 440) or benefit greatly from having a single shared implementation (eg: PEP 425). installation-guide-here pygments 2.13.0 This library provides utilities that implement the interoperability specifications which have clearly one correct behaviour (eg: PEP 440) or benefit greatly from having a single shared implementation (eg: PEP 425). installation-guide-here pymdown-extensions 9.7 Extensions for Python Markdown. installation-guide-here pyparsing 3.0.9 pyparsing module - Classes and methods to define and execute parsing grammars. installation-guide-here python-dateutil 2.8.2 Extensions to the standard Python datetime module The dateutil module provides powerful extensions to the standard datetime module, available in Python. installation-guide-here PyYAML 6.0 YAML is a data serialization format designed for human readability and interaction with scripting languages. PyYAML is a YAML parser and emitter for Python installation-guide-here pyyaml-env-tag 0.1 A custom YAML tag for referencing environment variables in YAML files. installation-guide-here requests 2.28.1 Python HTTP for Humans. installation-guide-here six 1.16.0 Six is a Python 2 and 3 compatibility library. It provides utility functions for smoothing over the differences between the Python versions with the goal of writing Python code that is compatible on both Python versions. See the documentation for more information on what is provided. installation-guide-here urlib3 1.26.12 urllib3 is one of the most downloaded packages on PyPI and is a dependency of many popular Python packages like Requests, Pip, and more! urllib3 is powerful and easy to use: installation-guide-here watchdog 2.1.9 Python API and shell utilities to monitor file system events Works on 3.6+. If you want to use Python 2.6, you should stick with watchdog < 0.10.0 If you want to use Python 2.7, 3.4 or 3.5, you should stick with watchdog < 1.0.0, installation-guide here zipp 3.10.0 A pathlib-compatible Zipfile object wrapper. Official backport of the standard library Path object. installation-guide-here","title":"&gt; Note: autotelegram only supports python 3.10 and above"},{"location":"404/","text":"404 Page Not Found.","title":"404"},{"location":"404/#404","text":"","title":"  404"},{"location":"404/#page-not-found","text":"","title":" Page Not Found."},{"location":"TESTS/","text":"Prerequisites: Python 3.6 or higher pip (Python package manager) Steps: Clone the Autotelegram repository from GitHub: git clone https://github.com/OSCA-Kampala-Chapter/autotelegram.git Navigate to the project directory: cd autotelegram Install the project's dependencies: pip install -r requirements.txt Install the testing dependencies: pip install -r requirements.txt Create a test Telegram bot by following the Telegram documentation on how to create bots. Create a .env file in the project's root directory with the following content, replacing with the token of the bot you created in the previous step: TELEGRAM_BOT_TOKEN=<YOUR_BOT_TOKEN> Run the tests: pytest This will run all the tests in the project and output the results in the terminal. Alternatively, you can run a specific test file by specifying the path to the file: pytest tests/path/to/test_file.py You can also run a specific test function within a test file by specifying the path to the file and the function name: pytest tests/path/to/test_file.py::test_function_name When running the tests, you can use the -s flag to print the output from print statements in the test code. If you encounter any issues when running the tests, please refer to the Autotelegram documentation or open an issue on the project's GitHub repository.","title":"TESTS"},{"location":"TESTS/#prerequisites","text":"Python 3.6 or higher pip (Python package manager)","title":"Prerequisites:"},{"location":"TESTS/#steps","text":"","title":"Steps:"},{"location":"TESTS/#clone-the-autotelegram-repository-from-github","text":"git clone https://github.com/OSCA-Kampala-Chapter/autotelegram.git","title":"Clone the Autotelegram repository from GitHub:"},{"location":"TESTS/#navigate-to-the-project-directory","text":"cd autotelegram","title":"Navigate to the project directory:"},{"location":"TESTS/#install-the-projects-dependencies","text":"pip install -r requirements.txt","title":"Install the project's dependencies:"},{"location":"TESTS/#install-the-testing-dependencies","text":"pip install -r requirements.txt","title":"Install the testing dependencies:"},{"location":"TESTS/#create-a-test-telegram-bot-by-following-the-telegram-documentation-on-how-to-create-bots","text":"Create a .env file in the project's root directory with the following content, replacing with the token of the bot you created in the previous step: TELEGRAM_BOT_TOKEN=<YOUR_BOT_TOKEN>","title":"Create a test Telegram bot by following the Telegram documentation on how to create bots."},{"location":"TESTS/#run-the-tests","text":"pytest This will run all the tests in the project and output the results in the terminal. Alternatively, you can run a specific test file by specifying the path to the file: pytest tests/path/to/test_file.py You can also run a specific test function within a test file by specifying the path to the file and the function name: pytest tests/path/to/test_file.py::test_function_name When running the tests, you can use the -s flag to print the output from print statements in the test code. If you encounter any issues when running the tests, please refer to the Autotelegram documentation or open an issue on the project's GitHub repository.","title":"Run the tests:"},{"location":"architecture/","text":"work-in-progress Autotelegram is composed of: - Telegram body - Network system Telegram body The telegram body contains all telegram specific modules. They are located in the telegram modules. We can break them down into - objects - methods - parser - application - context objects Telegram objects are our python representation of the JSON data that we send and receive from telegram bots. The telegram bot api page refers to them as types and gives detailed description of each of them. You can check the complete list here . We divide objects into general purpose and special purpose objects. The general purpose objects live in the autotelegram/telegram/objects module while special purpose objects live in the autotelegram/telegram/objects/<special-purpose> module. For example, a special purpose object like sticker is located in autotelegram/telegram/objects/stickers","title":"Architecture"},{"location":"architecture/#telegram-body","text":"The telegram body contains all telegram specific modules. They are located in the telegram modules. We can break them down into - objects - methods - parser - application - context","title":"Telegram body"},{"location":"architecture/#objects","text":"Telegram objects are our python representation of the JSON data that we send and receive from telegram bots. The telegram bot api page refers to them as types and gives detailed description of each of them. You can check the complete list here . We divide objects into general purpose and special purpose objects. The general purpose objects live in the autotelegram/telegram/objects module while special purpose objects live in the autotelegram/telegram/objects/<special-purpose> module. For example, a special purpose object like sticker is located in autotelegram/telegram/objects/stickers","title":"objects"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at {{ email }}. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at {{ email }}. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html","title":"Attribution"},{"location":"contributing/","text":"Autotelegram Contributing Guide Thank you for your interest in contributing to the Autotelegram project! By contributing to this open source project, you can help improve the tool and make it more useful to the community. Table of Contents Code of Conduct How to Contribute Getting Started Development Process Submitting a Pull Request Feedback and Support Maintainers Code of Conduct We are committed to providing a friendly, safe, and welcoming environment for all, regardless of gender identity and expression, sexual orientation, disability, mental health, ethnicity, religion, cultural background , seniority or age. All participants are expected to agree with and adhere to our Code of Conduct in all interactions with other contributors. How to Contribute There are many ways you can contribute to the Autotelegram project: It doesn't necessarily have to be code. Become a tester/user of the tool and provide feedback Report bugs and issues Suggest new features or improvements Write documentation Improve existing code Add new functionality We welcome contributions from everyone, regardless of their level of experience or technical background. However, we ask that you follow the guidelines as clearly shown in the README.md and below to help us when reviewing your Pull Request in order to integrate your contributions quickly and smoothly. Read here on how to make a Pull Request. Getting Started To get started, you should: Fork the Autotelegram repository on GitHub Clone your fork to your local machine. Install the development dependencies using pip install -r requirements-dev.txt Read the documentation to learn how to use the tool and how to run tests. Development Process We use the GitHub flow for development. These steps are chronological and should be carried out after the steps above(i.e forking the repo) Follow them religiously: Create a new branch for your work(apart from the main branch) Write code and tests on the new branch (probably called dev) Ensure that all tests pass by running pytest Update the documentation if necessary(optional) Stage and commit your changes with a clear and concise commit message Push the staged/committed changes to your fork Merge the changes from the \"dev\" branch to the main branch Create a pull request to sync your branch/fork with the main branch on the parent repository Submitting a Pull Request When you submit a pull request, please ensure to: Include a clear and detailed description of the changes you made Reference any issues that your pull request addresses Include tests for your changes if possible Follow the programming style and conventions used in the existing code Update the documentation if necessary or reach out to the maintainers to update it Your pull request will be reviewed by the project maintainers, who may ask you to make some changes or provide some more information. Please don't hesitate to apply and make the changes. Once the changes are applied, your pull request shall be approved, and it will be merged into the main branch. Feedback and Support If you have any questions, comments, or feedback about the Autotelegram project, please send them in by; Opening an Issue on GitHub Starting a Discussion on GitHub We also welcome feature requests and bug reports. If you need help using the tool or contributing to the project, you can; Join our Telegram group Follow OSCA Kampala on Twitter Maintainers The Autotelegram project is maintained by the following contributors: Tobias Hassan Kally Samson Uncle Moses Asiimwe Edgar Tumuhimbise Godwin If you have any questions or concerns about the project, you can contact any of the maintainers.","title":"Contributing"},{"location":"contributing/#autotelegram-contributing-guide","text":"Thank you for your interest in contributing to the Autotelegram project! By contributing to this open source project, you can help improve the tool and make it more useful to the community.","title":"Autotelegram Contributing Guide"},{"location":"contributing/#table-of-contents","text":"Code of Conduct How to Contribute Getting Started Development Process Submitting a Pull Request Feedback and Support Maintainers","title":"Table of Contents"},{"location":"contributing/#code-of-conduct","text":"We are committed to providing a friendly, safe, and welcoming environment for all, regardless of gender identity and expression, sexual orientation, disability, mental health, ethnicity, religion, cultural background , seniority or age. All participants are expected to agree with and adhere to our Code of Conduct in all interactions with other contributors.","title":"Code of Conduct"},{"location":"contributing/#how-to-contribute","text":"There are many ways you can contribute to the Autotelegram project: It doesn't necessarily have to be code.","title":"How to Contribute"},{"location":"contributing/#become-a-testeruser-of-the-tool-and-provide-feedback","text":"Report bugs and issues Suggest new features or improvements Write documentation Improve existing code Add new functionality We welcome contributions from everyone, regardless of their level of experience or technical background. However, we ask that you follow the guidelines as clearly shown in the README.md and below to help us when reviewing your Pull Request in order to integrate your contributions quickly and smoothly. Read here on how to make a Pull Request.","title":"Become a tester/user of the tool and provide feedback"},{"location":"contributing/#getting-started","text":"To get started, you should: Fork the Autotelegram repository on GitHub Clone your fork to your local machine. Install the development dependencies using pip install -r requirements-dev.txt Read the documentation to learn how to use the tool and how to run tests.","title":"Getting Started"},{"location":"contributing/#development-process","text":"We use the GitHub flow for development. These steps are chronological and should be carried out after the steps above(i.e forking the repo) Follow them religiously: Create a new branch for your work(apart from the main branch) Write code and tests on the new branch (probably called dev) Ensure that all tests pass by running pytest Update the documentation if necessary(optional) Stage and commit your changes with a clear and concise commit message Push the staged/committed changes to your fork Merge the changes from the \"dev\" branch to the main branch Create a pull request to sync your branch/fork with the main branch on the parent repository","title":"Development Process"},{"location":"contributing/#submitting-a-pull-request","text":"When you submit a pull request, please ensure to: Include a clear and detailed description of the changes you made Reference any issues that your pull request addresses Include tests for your changes if possible Follow the programming style and conventions used in the existing code Update the documentation if necessary or reach out to the maintainers to update it Your pull request will be reviewed by the project maintainers, who may ask you to make some changes or provide some more information. Please don't hesitate to apply and make the changes. Once the changes are applied, your pull request shall be approved, and it will be merged into the main branch.","title":"Submitting a Pull Request"},{"location":"contributing/#feedback-and-support","text":"If you have any questions, comments, or feedback about the Autotelegram project, please send them in by; Opening an Issue on GitHub Starting a Discussion on GitHub We also welcome feature requests and bug reports. If you need help using the tool or contributing to the project, you can; Join our Telegram group Follow OSCA Kampala on Twitter","title":"Feedback and Support"},{"location":"contributing/#maintainers","text":"The Autotelegram project is maintained by the following contributors: Tobias Hassan Kally Samson Uncle Moses Asiimwe Edgar Tumuhimbise Godwin If you have any questions or concerns about the project, you can contact any of the maintainers.","title":"Maintainers"},{"location":"get_started/","text":"Your first bot Autotelegram cares about developer productivity, and that's why it tries to abstract the tedious and laborious complex code needed to develop telegram bots and provides you with a nice and clean API to help you to quickly spin-up a telegram bot within minutes. You wanna see how it works? let's get started by building a simple echo bot. With the previous API, we had to do a lot of manual work using the context API. If you still want to use the context API, it's availabe for you. But the new API builds on top of the context API to give you a nice interface to build a bot. Before we can proceed building our bot, we need to create a bot in telegram and get our token. To get one, we need to create a bot with telegram's bot father. You can get detailed instruction on how to do that here Now that we have our token. Let me show you how easy it is to create a bot with autotelegram. First, we need to import the Context and PollingApp classes and then write an async function we shall pass to the PollingApp run method to process every incoming update. Here's how. from autotelegram.telegram.context import Context from autotelegram.telegram.application import PollingApp TOKEN = \"token-for-the-bot\" ctx = Context ( TOKEN ) app = PollingApp ( ctx ) async def echo ( update , ctx ): message = update . message text = message . text await message . respond_with_text ( text ) if __name__ == \"__main__\" : app . run ( echo ) So basically here's a break down of this simple app. - We create an instance of the Context class, passing in the bot token. - We create an instance of our PollingApp class and pass in the context instance. - And write our echo async function which shall respond back to every message with the same text that was sent to it. - We call the run function of the app with the echo async function. And there you have it, a fully functional bot with few lines of code. Adding command handlers We can add extra features to our bot to make it more useful. Telegram has a concept of commands. These are one word instructions we can pass our bot to handle some tasks. By default, telegram sends us a /start command whenever a user is interacting with our bot for the first time. To handle such command, the App class provides us with ability to write command handlers using the add_commandhandler decorator. Let's extend our echo example above to include a command handler that responds to the /start command to welcome our new user before starting to echo. Let's go. from autotelegram.telegram.context import Context from autotelegram.telegram.application import PollingApp TOKEN = \"token-for-the-bot\" ctx : Context = Context ( TOKEN ) app = PollingApp ( ctx ) @app . add_commandhandler ( \"/start\" ) async def start_handler ( message , context ): welcome_message = \"Hey there lovely user, welcome to echo bot\" await message . respond_with_text ( welcome_message ) async def echo ( update , ctx ): message = update . message text = message . text await message . respond_with_text ( text ) if __name__ == \"__main__\" : app . run ( echo ) We've created our start_handler command handler function. This will be called every time a new user starts a conversation with our bot. Further This section was added to give a sneak-peek into how easy it is to build telegram bots with autotelegram. To explore further, check out the rest of the documentation.","title":"Getting started"},{"location":"get_started/#your-first-bot","text":"Autotelegram cares about developer productivity, and that's why it tries to abstract the tedious and laborious complex code needed to develop telegram bots and provides you with a nice and clean API to help you to quickly spin-up a telegram bot within minutes. You wanna see how it works? let's get started by building a simple echo bot. With the previous API, we had to do a lot of manual work using the context API. If you still want to use the context API, it's availabe for you. But the new API builds on top of the context API to give you a nice interface to build a bot. Before we can proceed building our bot, we need to create a bot in telegram and get our token. To get one, we need to create a bot with telegram's bot father. You can get detailed instruction on how to do that here Now that we have our token. Let me show you how easy it is to create a bot with autotelegram. First, we need to import the Context and PollingApp classes and then write an async function we shall pass to the PollingApp run method to process every incoming update. Here's how. from autotelegram.telegram.context import Context from autotelegram.telegram.application import PollingApp TOKEN = \"token-for-the-bot\" ctx = Context ( TOKEN ) app = PollingApp ( ctx ) async def echo ( update , ctx ): message = update . message text = message . text await message . respond_with_text ( text ) if __name__ == \"__main__\" : app . run ( echo ) So basically here's a break down of this simple app. - We create an instance of the Context class, passing in the bot token. - We create an instance of our PollingApp class and pass in the context instance. - And write our echo async function which shall respond back to every message with the same text that was sent to it. - We call the run function of the app with the echo async function. And there you have it, a fully functional bot with few lines of code.","title":"Your first bot"},{"location":"get_started/#adding-command-handlers","text":"We can add extra features to our bot to make it more useful. Telegram has a concept of commands. These are one word instructions we can pass our bot to handle some tasks. By default, telegram sends us a /start command whenever a user is interacting with our bot for the first time. To handle such command, the App class provides us with ability to write command handlers using the add_commandhandler decorator. Let's extend our echo example above to include a command handler that responds to the /start command to welcome our new user before starting to echo. Let's go. from autotelegram.telegram.context import Context from autotelegram.telegram.application import PollingApp TOKEN = \"token-for-the-bot\" ctx : Context = Context ( TOKEN ) app = PollingApp ( ctx ) @app . add_commandhandler ( \"/start\" ) async def start_handler ( message , context ): welcome_message = \"Hey there lovely user, welcome to echo bot\" await message . respond_with_text ( welcome_message ) async def echo ( update , ctx ): message = update . message text = message . text await message . respond_with_text ( text ) if __name__ == \"__main__\" : app . run ( echo ) We've created our start_handler command handler function. This will be called every time a new user starts a conversation with our bot.","title":"Adding command handlers"},{"location":"get_started/#further","text":"This section was added to give a sneak-peek into how easy it is to build telegram bots with autotelegram. To explore further, check out the rest of the documentation.","title":"Further"},{"location":"reference/application/","text":"BaseApp Bases: object Base class for the telegram application. add_commandhandler ( command ) Registers a coroutine function to be called whenever the bot receives a command instruction from the user. The callback should accept one argument which is the bot context instance. Parameters: Name Type Description Default command str a string representing a command to add a handler to. The command should start with a forward slash '/' required add_errorhandler ( exception , handler ) Adds an exception handler function to the application class. The handler is called with the raised exception remove_commandhandler ( command ) Remove command and respective callback from the register. Raises ValueError in case the command was not registered before. Parameters: Name Type Description Default command str command to remove from handler table required PollingApp Bases: BaseApp Implementation of the polling update method for bot applications. This application runs in a loop while making periodic requests to the bot API to poll for updates. Once updates are received, they are then processed. run ( callback , wait_for = 0 ) Runs the bot application, calling the callback coroutine for every request made to the bot API. It waits for wait_for seconds before making another request to get updates, defualt is 0. Parameters: Name Type Description Default callback async function coroutine function to be called for every update object received. This function should required wait_for int integer representing the time in seconds to wait before requesting for updates 0 WebhookApp Bases: BaseApp Implementation of the webhook update method of the bot application. The webhook app is implemented as an ASGI application and can be run with any ASGI compliant server such as Daphne, Uvicorn or Hypercorn. The constructor takes in two arguments: Parameters: Name Type Description Default context Context The bot context required callback Async function A callback async function to call for every new update received required","title":"application"},{"location":"reference/application/#autotelegram.telegram.application.BaseApp","text":"Bases: object Base class for the telegram application.","title":"BaseApp"},{"location":"reference/application/#autotelegram.telegram.application.BaseApp.add_commandhandler","text":"Registers a coroutine function to be called whenever the bot receives a command instruction from the user. The callback should accept one argument which is the bot context instance. Parameters: Name Type Description Default command str a string representing a command to add a handler to. The command should start with a forward slash '/' required","title":"add_commandhandler()"},{"location":"reference/application/#autotelegram.telegram.application.BaseApp.add_errorhandler","text":"Adds an exception handler function to the application class. The handler is called with the raised exception","title":"add_errorhandler()"},{"location":"reference/application/#autotelegram.telegram.application.BaseApp.remove_commandhandler","text":"Remove command and respective callback from the register. Raises ValueError in case the command was not registered before. Parameters: Name Type Description Default command str command to remove from handler table required","title":"remove_commandhandler()"},{"location":"reference/application/#autotelegram.telegram.application.PollingApp","text":"Bases: BaseApp Implementation of the polling update method for bot applications. This application runs in a loop while making periodic requests to the bot API to poll for updates. Once updates are received, they are then processed.","title":"PollingApp"},{"location":"reference/application/#autotelegram.telegram.application.PollingApp.run","text":"Runs the bot application, calling the callback coroutine for every request made to the bot API. It waits for wait_for seconds before making another request to get updates, defualt is 0. Parameters: Name Type Description Default callback async function coroutine function to be called for every update object received. This function should required wait_for int integer representing the time in seconds to wait before requesting for updates 0","title":"run()"},{"location":"reference/application/#autotelegram.telegram.application.WebhookApp","text":"Bases: BaseApp Implementation of the webhook update method of the bot application. The webhook app is implemented as an ASGI application and can be run with any ASGI compliant server such as Daphne, Uvicorn or Hypercorn. The constructor takes in two arguments: Parameters: Name Type Description Default context Context The bot context required callback Async function A callback async function to call for every new update received required","title":"WebhookApp"},{"location":"reference/context/","text":"This module contains the context of the telegram bot Context Bases: BotAPI , GamesAPI , InlineAPI , PassportAPI , PaymentsAPI , StickerAPI __init__ ( token , * , connection = None , offset_autoincrement = True ) Context acts as the representation of the telegram bot get_updates ( ** kwargs ) async get updates from telegram. Automatically increases offset on next request MessageBox MessageBox is an object intended to be used for sending messages between telegram actors. The Messagebox contains The telegram object being transfered and the context object TelegramResultError Bases: Exception raised when telegram returns \"ok\" as false get_current_context () this function returns current context of the bot.","title":"context"},{"location":"reference/context/#autotelegram.telegram.context.Context","text":"Bases: BotAPI , GamesAPI , InlineAPI , PassportAPI , PaymentsAPI , StickerAPI","title":"Context"},{"location":"reference/context/#autotelegram.telegram.context.Context.__init__","text":"Context acts as the representation of the telegram bot","title":"__init__()"},{"location":"reference/context/#autotelegram.telegram.context.Context.get_updates","text":"get updates from telegram. Automatically increases offset on next request","title":"get_updates()"},{"location":"reference/context/#autotelegram.telegram.context.MessageBox","text":"MessageBox is an object intended to be used for sending messages between telegram actors. The Messagebox contains The telegram object being transfered and the context object","title":"MessageBox"},{"location":"reference/context/#autotelegram.telegram.context.TelegramResultError","text":"Bases: Exception raised when telegram returns \"ok\" as false","title":"TelegramResultError"},{"location":"reference/context/#autotelegram.telegram.context.get_current_context","text":"this function returns current context of the bot.","title":"get_current_context()"},{"location":"reference/network/","text":"Connection This module contains specific implementations for the abstract protocols in the protocol module. The protocols are implemented as connection classes. This module uses httpx to implement the protocol api HTTPConnection Bases: HTTP close () async concrete implementation of close get ( url , params = None ) async concrete implementation of get post ( url , headers = None , body = None ) async concrete implementation of post Protocol The Protocol module contains abstract classes that represent a protocol. The Classes expose specific methods that define the relevant protocol and can be used to send and receive requests. The Concrete subclasses should implement the given methods HTTP Bases: Protocol Base abstraction class for the HTTP Protocol close () abstractmethod async abstract close method get ( url , headers = None ) abstractmethod async abstract get method post ( url , headers = None , body = None ) abstractmethod async abstract post method WebSocket Base abstraction class for the Websocket protocol Url Manager This module handles construction of urls needed for making queries UrlManager add_method ( other ) append other part onto the url string add_query ( ** kwargs ) append queries to the query part of the url","title":"network"},{"location":"reference/network/#connection","text":"This module contains specific implementations for the abstract protocols in the protocol module. The protocols are implemented as connection classes. This module uses httpx to implement the protocol api","title":"Connection"},{"location":"reference/network/#autotelegram.network.connection.HTTPConnection","text":"Bases: HTTP","title":"HTTPConnection"},{"location":"reference/network/#autotelegram.network.connection.HTTPConnection.close","text":"concrete implementation of close","title":"close()"},{"location":"reference/network/#autotelegram.network.connection.HTTPConnection.get","text":"concrete implementation of get","title":"get()"},{"location":"reference/network/#autotelegram.network.connection.HTTPConnection.post","text":"concrete implementation of post","title":"post()"},{"location":"reference/network/#protocol","text":"The Protocol module contains abstract classes that represent a protocol. The Classes expose specific methods that define the relevant protocol and can be used to send and receive requests. The Concrete subclasses should implement the given methods","title":"Protocol"},{"location":"reference/network/#autotelegram.network.protocol.HTTP","text":"Bases: Protocol Base abstraction class for the HTTP Protocol","title":"HTTP"},{"location":"reference/network/#autotelegram.network.protocol.HTTP.close","text":"abstract close method","title":"close()"},{"location":"reference/network/#autotelegram.network.protocol.HTTP.get","text":"abstract get method","title":"get()"},{"location":"reference/network/#autotelegram.network.protocol.HTTP.post","text":"abstract post method","title":"post()"},{"location":"reference/network/#autotelegram.network.protocol.WebSocket","text":"Base abstraction class for the Websocket protocol","title":"WebSocket"},{"location":"reference/network/#url-manager","text":"This module handles construction of urls needed for making queries","title":"Url Manager"},{"location":"reference/network/#autotelegram.network.urlmanager.UrlManager","text":"","title":"UrlManager"},{"location":"reference/network/#autotelegram.network.urlmanager.UrlManager.add_method","text":"append other part onto the url string","title":"add_method()"},{"location":"reference/network/#autotelegram.network.urlmanager.UrlManager.add_query","text":"append queries to the query part of the url","title":"add_query()"},{"location":"reference/parser/","text":"Parser parse ( json_data , root_object = None ) The parse method initiates the parsing processing for constructing a telegram object tree from a JSON object. It takes in an optional second argument to direct the parse. The second argument is a string representing the object to use as root and continue the parsing from. Parameters: Name Type Description Default json_data dict The json object to parse required root_object str The object to use as root and start the parsing process from. Can be \"message\",\"chat\",\"user\" etc None","title":"parser"},{"location":"reference/parser/#autotelegram.telegram.parser.Parser","text":"","title":"Parser"},{"location":"reference/parser/#autotelegram.telegram.parser.Parser.parse","text":"The parse method initiates the parsing processing for constructing a telegram object tree from a JSON object. It takes in an optional second argument to direct the parse. The second argument is a string representing the object to use as root and continue the parsing from. Parameters: Name Type Description Default json_data dict The json object to parse required root_object str The object to use as root and start the parsing process from. Can be \"message\",\"chat\",\"user\" etc None","title":"parse()"},{"location":"reference/api/gamesapi/","text":"This module contains a class with methods representing the games api","title":"games api"},{"location":"reference/api/genapi/","text":"This module contains a class having methods representing the bot api methods BotAPI answer_callback_query ( ** kwargs ) async Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. Parameters: Name Type Description Default callback_query_id str Unique identifier for the query to be answered. required text str | None Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters. Defaults to None. required show_alert bool | None If True, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.. Defaults to None. required url str | None URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @BotFather, specify the URL that opens your game - note that this will only work if the query comes from a callback_game button. Defaults to None. required cache_time int | None The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0. Defaults to None. required Returns: Name Type Description bool bool On success, True is returned. approve_chat_join_request ( ** kwargs ) async Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required user_id str Unique identifier of the target user. required Returns: Name Type Description bool bool Returns True on success. ban_chat_member ( ** kwargs ) async Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id int Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername) required user_id int Unique identifier of the target user. required until_date str | None Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only. Defaults to None. required revoke_messages bool | None Pass True to delete all messages from the chat for the user that is being removed. If False, the user will be able to see messages in the group that were sent before the user was removed. Always True for supergroups and channels. Defaults to None. required Returns: Name Type Description bool bool Returns True on success. ban_chat_sender_chat ( ** kwargs ) async Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id str | int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required sender_chat_id int Unique identifier of the target sender chat. required Returns: Name Type Description bool bool Returns True on success. close () async Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters. close_forum_topic ( ** kwargs ) async Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required message_thread_id int Unique identifier for the target message thread of the forum topic required Returns: Name Type Description bool bool Returns True on success copy_message ( ** kwargs ) async Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required from_chat_id int | str Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername) required message_id int | str Message identifier in the chat specified in from_chat_id required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required caption str | None New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept. Defaults to None. required parse_mode str | None Mode for parsing entities in the new caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of parse_mode. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id bool | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required create_chat_invite_link ( ** kwargs ) async Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object. Parameters: Name Type Description Default chat_id str | int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required name str | None Invite link name; 0-32 characters. Defaults to None. required expire_date str | None Point in time (Unix timestamp) when the link will expire. Defaults to None. required member_limit int | None The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999. Defaults to None. required creates_join_request bool | None True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified. Defaults to None. required Returns: Name Type Description ChatInviteLink ChatInviteLink Returns the new invite link as ChatInviteLink object. create_forum_topic ( ** kwargs ) async Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required name str Topic name, 1-128 characters required icon_color int | None Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F). Defaults to None. required icon_custom_emoji_id str | None Unique identifier of the custom emoji shown as the topic icon. Use getForumTopicIconStickers to get all allowed custom emoji identifiers. Defaults to None. required Returns: Name Type Description ForumTopic ForumTopic Returns information about the created topic as a ForumTopic object. decline_chat_join_request ( ** kwargs ) async Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required user_id str Unique identifier of the target user. required Returns: Name Type Description bool bool Returns True on success. delete_chat_photo ( ** kwargs ) async se this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required Returns: Name Type Description bool bool Returns True on success. delete_chat_sticker_set ( ** kwargs ) async Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). required Returns: Name Type Description bool bool Returns True on success. delete_forum_topic ( ** kwargs ) async Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required message_thread_id int Unique identifier for the target message thread of the forum topic required Returns: Name Type Description bool bool Returns True on success. delete_my_commands ( ** kwargs ) async Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Parameters: Name Type Description Default scope BotCommandScope | None A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault. required language_code str | None A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands. Defaults to None. required Returns: Name Type Description bool bool Returns True on success. edit_chat_invite_link ( ** kwargs ) async Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object. Parameters: Name Type Description Default chat_id str | int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required invite_link str The invite link to edit required name str | None Invite link name; 0-32 characters. Defaults to None. required expire_date str | None Point in time (Unix timestamp) when the link will expire. Defaults to None. required member_limit int | None The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999. Defaults to None. required creates_join_request bool | None True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified. Defaults to None. required Returns: Name Type Description ChatInviteLink ChatInviteLink Returns the edited invite link as ChatInviteLink object. edit_forum_topic ( ** kwargs ) async Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required message_thread_id str Unique identifier for the target message thread of the forum topic. required name str Topic name, 1-128 characters required icon_custom_emoji_id str | None Unique identifier of the custom emoji shown as the topic icon. Use getForumTopicIconStickers to get all allowed custom emoji identifiers. Defaults to None. required Returns: Name Type Description bool bool Returns True on success. edit_message_live_location ( ** kwargs ) async Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required latitude float Latitude of the new location required longitude float Longitude of the new location required message_id int | None Required if inline_message_id is not specified. Identifier of the message to edit. Defaults to None. required inline_message_id str | None Required if chat_id and message_id are not specified. Identifier of the inline message. required horizontal_accuracy float | None The radius of uncertainty for the location, measured in meters; 0-1500. Defaults to None. required heading int | None For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. Defaults to None. required proximity_alert_radius int | None The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. Defaults to None. required reply_markup InlineKeyboardMarkup A JSON-serialized object for a new inline keyboard. Defaults to None. required export_chat_invite_link ( ** kwargs ) async Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id str | int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required Returns: Name Type Description str str Returns the new invite link as String on success. foward_message ( ** kwargs ) async Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required from_chat_id int | str Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername) required message_id int Message identifier in the chat specified in from_chat_id required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content int | None Protects the contents of the forwarded message from forwarding and saving. Defaults to None. required get_chat ( ** kwargs ) async Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.) Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required Returns: Name Type Description Chat Chat Returns True on success. get_chat_administrators ( ** kwargs ) async Use this method to get a list of administrators in a chat, which aren't bots Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required Returns: Type Description list [ ChatMember ] list[ChatMember]: Returns an Array of ChatMember objects. get_chat_member ( ** kwargs ) async Use this method to get information about a member of a chat Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername) required user_id int Unique identifier of the target user required Returns: Name Type Description ChatMember ChatMember Returns a ChatMember object on success. get_chat_member_count ( ** kwargs ) async Use this method to get the number of members in a chat Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required Returns: Name Type Description int int Returns Int on success. get_chat_menu_button ( ** kwargs ) async Use this method to get the current value of the bot's menu button in a private chat, or the default menu butto Parameters: Name Type Description Default chat_id int | None Unique identifier for the target private chat. If not specified, default bot's menu button will be returned. Defaults to None. required Returns: Name Type Description MenuButton MenuButton Returns MenuButton on success. get_file ( ** kwargs ) async Use this method to get basic information about a file and prepare it for downloading. Parameters: Name Type Description Default file_id int File identifier to get information about. required get_forum_topic_icon_stickers () async Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns: Type Description list [ Sticker ] list[Sticker]: Returns an Array of Sticker objects. get_me () async A simple method for testing your bot's authentication token. Requires no parameters. Returns basic information about the bot in form of a User object. get_my_commands ( ** kwargs ) async Use this method to get the current list of the bot's commands for the given scope and user language. Parameters: Name Type Description Default scope BotCommandScope | None A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault. required language_code str | None A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands. Defaults to None. required Returns: Type Description list [ BotCommand ] | list list[BotCommand] | list: Returns an Array of BotCommand objects. If commands aren't set, an empty list is returned. get_my_default_administrator_rights ( ** kwargs ) async Use this method to get the current default administrator rights of the bot. Parameters: Name Type Description Default for_channels bool | None Pass True to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned. Defaults to None. required Returns: Name Type Description ChatAdministratorRights ChatAdministratorRights Returns ChatAdministratorRights on success. get_updates ( ** kwargs ) async Use this method to receive incoming updates using long polling (wiki). Returns an Array of Update objects. Parameters: Name Type Description Default offset int Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will forgotten. required limit int Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100. required timeout int Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only. required allowed_updates list [ str ] A JSON-serialized list of the update types you want your bot to receive. For example, specify [\u201cmessage\u201d, \u201cedited_channel_post\u201d, \u201ccallback_query\u201d] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used. Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time. required Returns: Name Type Description Update list [ Update ] Returns a list of Updates on success get_user_profile_photos ( ** kwargs ) async Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object. Parameters: Name Type Description Default user_id int Unique identifier of the target user. required offset int | None Sequential number of the first photo to be returned. By default, all photos are returned. Defaults to None. required limit int | None Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100. Defaults to None. required leave_chat ( ** kwargs ) async Use this method for your bot to leave a group, supergroup or channel. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required Returns: Name Type Description bool bool Returns True on success. logout () async Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters. pin_chat_message ( ** kwargs ) async Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required message_id int Identifier of a message to pin required disable_notification bool | None Pass True if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats. Defaults to None. required Returns: Name Type Description bool bool Returns True on success. promote_chat_member ( ** kwargs ) async Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Parameters: Name Type Description Default chat_id int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required user_id int Unique identifier of the target user required is_anonymous bool | None Pass True if the administrator's presence in the chat is hidden. Defaults to None. required can_manage_chat bool | None Pass True if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege. Defaults to None. required can_post_messages bool | None Pass True if the administrator can create channel posts, channels only. Defaults to None. required can_edit_messages bool | None Pass True if the administrator can edit messages of other users and can pin messages, channels only. Defaults to None. required can_delete_messages bool | None Pass True if the administrator can delete messages of other users. Defaults to None. required can_manage_video_chats bool | None Pass True if the administrator can manage video chats. Defaults to None. required can_restrict_members bool | None Pass True if the administrator can restrict, ban or unban chat members. Defaults to None. required can_promote_members bool | None Pass True if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him). Defaults to None. required can_change_info bool | None Pass True if the administrator can change chat title, photo and other settings. Defaults to None. required can_invite_users bool | None Pass True if the administrator can invite new users to the chat. Defaults to None. required can_pin_messages bool | None Pass True if the administrator can pin messages, supergroups only. Defaults to None. required can_manage_topics bool | None Pass True if the user is allowed to create, rename, close, and reopen forum topics, supergroups only. Defaults to None. required Returns: Name Type Description bool bool Returns True on success. reopen_forum_topic ( ** kwargs ) async Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required message_thread_id int Unique identifier for the target message thread of the forum topic required Returns: Name Type Description bool bool Returns True on success restrict_chat_member ( ** kwargs ) async Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). required user_id int Unique identifier of the target user. required permissions ChatPermissions A JSON-serialized object for new user permissions. required until_date str | None Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever. Defaults to None. required Returns: Name Type Description bool bool Returns True on success. revoke_chat_invite_link ( ** kwargs ) async Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id int | str Unique identifier of the target chat or username of the target channel (in the format @channelusername). required invite_link str The invite link to revoke. required Returns: Name Type Description ChatInviteLink ChatInviteLink Returns the revoked invite link as ChatInviteLink object. send_animation ( ** kwargs ) async Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required animation InputFile | str Animation to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data required message_thread_id str | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required duration int | None Duration of sent animation in seconds. Defaults to None. required width int | None Animation width. Defaults to None. required height int | None Animation height. Defaults to None. required thumb InputFile | str | None Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. Defaults to None. required caption str | None Animation caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the video caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required supports_streaming bool | None Pass True if the uploaded video is suitable for streaming. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required send_audio ( ** kwargs ) async Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required photo InputFile | str Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required caption str | None Audio caption, 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the audio caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required duration int | None Duration of the audio in seconds. Defaults to None. required performer str | None Performer. Defaults to None required title str | None Track name. Defaults None. required thumb InputFile | str | None Thumbnail of the file sent. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id bool | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required send_chat_action ( ** kwargs ) async Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success. Parameters: Name Type Description Default chat_id int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required action str Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_voice or upload_voice for voice notes, upload_document for general files, choose_sticker for stickers, find_location for location data, record_video_note or upload_video_note for video notes. required send_contact ( ** kwargs ) async Use this method to send phone contacts. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int Unique identifier for the target chat or username of the target channel (in the format @channelusername) required phone_number int Contact's phone number required first_name str Contact's first name required last_name str | None Contact's last name. Defaults to None. required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required vcard str | None Additional data about the contact in the form of a vCard, 0-2048 bytes. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_messge_id bool | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply | None Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required send_dice ( ** kwargs ) async Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required emoji str | None Emoji on which the dice throw animation is based. Currently, must be one of \u201c\ud83c\udfb2\u201d, \u201c\ud83c\udfaf\u201d, \u201c\ud83c\udfc0\u201d, \u201c\u26bd\u201d, \u201c\ud83c\udfb3\u201d, or \u201c\ud83c\udfb0\u201d. Dice can have values 1-6 for \u201c\ud83c\udfb2\u201d, \u201c\ud83c\udfaf\u201d and \u201c\ud83c\udfb3\u201d, values 1-5 for \u201c\ud83c\udfc0\u201d and \u201c\u26bd\u201d, and values 1-64 for \u201c\ud83c\udfb0\u201d. Defaults to \u201c\ud83c\udfb2\u201d. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply | None Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required send_document ( ** kwargs ) async Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required document InputFile | str File to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required caption str | None Document caption(may also be used when resending documents by file_id), 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the audio caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required disable_content_type_detection bool | None Disables automatic server-side content type detection for files uploaded using multipart/form-data. Deafults to None. required thumb InputFile | str | None Thumbnail of the file sent. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id bool | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required send_location ( ** kwargs ) async Use this method to send point on the map. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required latitude float Latitude of the location required longitude float Longitude of the location required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required horizontal_accuracy float | None The radius of uncertainty for the location, measured in meters; 0-1500. Defaults to None. required live_period int | None Period in seconds for which the location will be updated (see Live Locations, should be between 60 and 86400. Defaults to None. required heading int | None For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. Defaults to None. required proximity_alert_radius int | None For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required send_media_group ( ** kwargs ) async Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required media list [ InputMediaAudio | InputMediaDocument | InputMediaPhoto | InputMediaVideo ] A JSON-serialized array describing messages to be sent, must include 2-10 items. required message_thread_id str | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required send_message ( ** kwargs ) async Use this method to send text messages. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required text str Text of the message to be sent, 1-4096 characters after entities parsing required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required parse_mode str | None Mode for parsing entities in the message text. Defaults to None. required entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in message text, which can be specified instead of parse_mode. Defaults to None. required disable_web_page_preview bool | None Disables link previews for links in this message. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required send_photo ( ** kwargs ) async Use this method to send photos. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required photo InputFile | str Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required caption str | None Photo caption (may also be used when resending photos by file_id), 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the photo caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id bool | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required send_poll ( ** kwargs ) async Use this method to send a native poll. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required question str Poll question, 1-300 characters required options list [ str ] A JSON-serialized list of answer options, 2-10 strings 1-100 characters each. required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required is_anonymous bool | None True, if the poll needs to be anonymous, defaults to True. Defaults to None. required type str | None Poll type, \u201cquiz\u201d or \u201cregular\u201d. Defaults to \u201cregular\u201d. required allows_multiple_answers bool | None True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False. Defaults to None. required correct_option_id int | None 0-based identifier of the correct answer option, required for polls in quiz mode. Defaults to None. required explanation str | None Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing. Defaults to None. required explanation_parse_mode str | None Mode for parsing entities in the explanation. Defaults to None. required explanation_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the poll explanation, which can be specified instead of parse_mode. Defaults to None. required open_period int | None Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date. Defaults to None. required close_date int | None Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with open_period. Defaults to None. required is_closed bool | None Pass True if the poll needs to be immediately closed. This can be useful for poll preview.. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id bool | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply | None Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required send_venue ( ** kwargs ) async Use this method to send information about a venue. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int Unique identifier for the target chat or username of the target channel (in the format @channelusername) required latitude float Latitude of the venue required longitude float Longitude of the venue required title str Name of the venue required address str Address of the venue required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. required foursquare_id str | None Foursquare identifier of the venue. Defaults to None. required foursquare_type str | None Foursquare type of the venue, if known. (For example, \u201carts_entertainment/default\u201d, \u201carts_entertainment/aquarium\u201d or \u201cfood/icecream\u201d.). Defaults to None. required google_place_id str | None Google Places identifier of the venue. Defaults to None. required google_place_type str | None Google Places type of the venue. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply | None description . Defaults to None. required send_video ( ** kwargs ) async Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required video InputFile | str Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data required message_thread_id str | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required duration int | None Duration of sent video in seconds. Defaults to None. required width int | None Video width. Defaults to None. required height int | None Video height. Defaults to None. required thumb InputFile | str | None Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. Defaults to None. required caption str | None Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the video caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required supports_streaming bool | None Pass True if the uploaded video is suitable for streaming. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required send_video_note ( ** kwargs ) async As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required video_note InputFile | str Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data required message_thread_id str | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required duration int | None Duration of sent video in seconds. Defaults to None. required height int | None Video height. Defaults to None. required thumb InputFile | str | None Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. Defaults to None. required caption str | None Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the video caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required send_voice ( ** kwargs ) async Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required voice InputFile | str Audio file to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data required message_thread_id str | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required duration int | None Duration of sent video in seconds. Defaults to None. required caption str | None Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the video caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required set_chat_administrator_custom_title ( ** kwargs ) async Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). required user_id int Unique identifier of the target user required custom_title str New custom title for the administrator; 0-16 characters, emoji are not allowed. required Returns: Name Type Description bool bool Returns True on success. set_chat_description ( ** kwargs ) async Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required description str | None New chat description, 0-255 characters. Defaults to None. required Returns: Name Type Description bool bool Returns True on success. set_chat_menu_button ( ** kwargs ) async Use this method to change the bot's menu button in a private chat, or the default menu button. Parameters: Name Type Description Default chat_id int | None Unique identifier for the target private chat. If not specified, default bot's menu button will be changed. Defaults to None. required menu_button MenuButton | None A JSON-serialized object for the bot's new menu button. Defaults to MenuButtonDefault. Defaults to None. required Returns: Name Type Description bool bool Returns True on success. set_chat_permissions ( ** kwargs ) async Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Parameters: Name Type Description Default chat_id str | int Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). required permissions ChatPermissions A JSON-serialized object for new default chat permissions. required Returns: Name Type Description bool bool Returns True on success. set_chat_photo ( ** kwargs ) async Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required photo InputFile New chat photo, uploaded using multipart/form-data required Returns: Name Type Description bool bool Returns True on success. set_chat_sticker_set ( ** kwargs ) async Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required sticker_set_name str Name of the sticker set to be set as the group sticker set required Returns: Name Type Description bool bool Returns True on success. set_chat_title ( ** kwargs ) async Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required title str New chat title, 1-128 characters required Returns: Name Type Description bool bool Returns True on success. set_my_commands ( ** kwargs ) async Use this method to change the list of the bot's commands. Parameters: Name Type Description Default commands list [ BotCommand ] A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified. required scope BotCommandScope | None A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault. Defaults to None. required language_code str | None A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands. Defaults to None. required Returns: Name Type Description bool bool Returns True on success. set_my_default_administrator_rights ( ** kwargs ) async Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are are free to modify the list before adding the bot Parameters: Name Type Description Default rights ChatAdministratorRights | None A JSON-serialized object describing new default administrator rights. If not specified, the default administrator rights will be cleared. Defaults to None. required for_channels bool | None Pass True to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed. Defaults to None. required Returns: Name Type Description bool bool Returns True on success. stop_message_live_location ( ** kwargs ) async Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned. Parameters: Name Type Description Default chat_id int | None Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername) required message_id int | None Required if inline_message_id is not specified. Identifier of the message with live location to stop. Defaults to None. required inline_message_id int | None Required if chat_id and message_id are not specified. Identifier of the inline message. Defaults to None. required reply_markup InlineKeyboardMarkup | None A JSON-serialized object for a new inline keyboard. Defaults to None. required unban_chat_member ( ** kwargs ) async Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername). required user_id int Unique identifier of the target user. required only_if_banned bool | None Do nothing if the user is not banned. Defaults to None. required Returns: Name Type Description bool bool Returns True on success. unban_chat_sender_chat ( ** kwargs ) async Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id str | int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required sender_chat_id int Unique identifier of the target sender chat. required Returns: Name Type Description bool bool Returns True on success. unpin_all_chat_message ( ** kwargs ) async Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required Returns: Name Type Description bool bool Returns True on success. unpin_all_forum_topic_messages ( ** kwargs ) async Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required message_thread_id int Unique identifier for the target message thread of the forum topic required Returns: Name Type Description bool bool Returns True on success. unpin_chat_message ( ** kwargs ) async Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required message_id int | None Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"general api"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI","text":"","title":"BotAPI"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.answer_callback_query","text":"Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. Parameters: Name Type Description Default callback_query_id str Unique identifier for the query to be answered. required text str | None Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters. Defaults to None. required show_alert bool | None If True, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.. Defaults to None. required url str | None URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @BotFather, specify the URL that opens your game - note that this will only work if the query comes from a callback_game button. Defaults to None. required cache_time int | None The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0. Defaults to None. required Returns: Name Type Description bool bool On success, True is returned.","title":"answer_callback_query()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.approve_chat_join_request","text":"Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required user_id str Unique identifier of the target user. required Returns: Name Type Description bool bool Returns True on success.","title":"approve_chat_join_request()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.ban_chat_member","text":"Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id int Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername) required user_id int Unique identifier of the target user. required until_date str | None Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only. Defaults to None. required revoke_messages bool | None Pass True to delete all messages from the chat for the user that is being removed. If False, the user will be able to see messages in the group that were sent before the user was removed. Always True for supergroups and channels. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"ban_chat_member()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.ban_chat_sender_chat","text":"Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id str | int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required sender_chat_id int Unique identifier of the target sender chat. required Returns: Name Type Description bool bool Returns True on success.","title":"ban_chat_sender_chat()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.close","text":"Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters.","title":"close()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.close_forum_topic","text":"Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required message_thread_id int Unique identifier for the target message thread of the forum topic required Returns: Name Type Description bool bool Returns True on success","title":"close_forum_topic()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.copy_message","text":"Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required from_chat_id int | str Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername) required message_id int | str Message identifier in the chat specified in from_chat_id required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required caption str | None New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept. Defaults to None. required parse_mode str | None Mode for parsing entities in the new caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of parse_mode. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id bool | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"copy_message()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.create_chat_invite_link","text":"Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object. Parameters: Name Type Description Default chat_id str | int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required name str | None Invite link name; 0-32 characters. Defaults to None. required expire_date str | None Point in time (Unix timestamp) when the link will expire. Defaults to None. required member_limit int | None The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999. Defaults to None. required creates_join_request bool | None True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified. Defaults to None. required Returns: Name Type Description ChatInviteLink ChatInviteLink Returns the new invite link as ChatInviteLink object.","title":"create_chat_invite_link()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.create_forum_topic","text":"Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required name str Topic name, 1-128 characters required icon_color int | None Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F). Defaults to None. required icon_custom_emoji_id str | None Unique identifier of the custom emoji shown as the topic icon. Use getForumTopicIconStickers to get all allowed custom emoji identifiers. Defaults to None. required Returns: Name Type Description ForumTopic ForumTopic Returns information about the created topic as a ForumTopic object.","title":"create_forum_topic()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.decline_chat_join_request","text":"Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required user_id str Unique identifier of the target user. required Returns: Name Type Description bool bool Returns True on success.","title":"decline_chat_join_request()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.delete_chat_photo","text":"se this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required Returns: Name Type Description bool bool Returns True on success.","title":"delete_chat_photo()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.delete_chat_sticker_set","text":"Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). required Returns: Name Type Description bool bool Returns True on success.","title":"delete_chat_sticker_set()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.delete_forum_topic","text":"Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required message_thread_id int Unique identifier for the target message thread of the forum topic required Returns: Name Type Description bool bool Returns True on success.","title":"delete_forum_topic()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.delete_my_commands","text":"Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Parameters: Name Type Description Default scope BotCommandScope | None A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault. required language_code str | None A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"delete_my_commands()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.edit_chat_invite_link","text":"Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object. Parameters: Name Type Description Default chat_id str | int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required invite_link str The invite link to edit required name str | None Invite link name; 0-32 characters. Defaults to None. required expire_date str | None Point in time (Unix timestamp) when the link will expire. Defaults to None. required member_limit int | None The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999. Defaults to None. required creates_join_request bool | None True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified. Defaults to None. required Returns: Name Type Description ChatInviteLink ChatInviteLink Returns the edited invite link as ChatInviteLink object.","title":"edit_chat_invite_link()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.edit_forum_topic","text":"Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required message_thread_id str Unique identifier for the target message thread of the forum topic. required name str Topic name, 1-128 characters required icon_custom_emoji_id str | None Unique identifier of the custom emoji shown as the topic icon. Use getForumTopicIconStickers to get all allowed custom emoji identifiers. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"edit_forum_topic()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.edit_message_live_location","text":"Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required latitude float Latitude of the new location required longitude float Longitude of the new location required message_id int | None Required if inline_message_id is not specified. Identifier of the message to edit. Defaults to None. required inline_message_id str | None Required if chat_id and message_id are not specified. Identifier of the inline message. required horizontal_accuracy float | None The radius of uncertainty for the location, measured in meters; 0-1500. Defaults to None. required heading int | None For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. Defaults to None. required proximity_alert_radius int | None The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. Defaults to None. required reply_markup InlineKeyboardMarkup A JSON-serialized object for a new inline keyboard. Defaults to None. required","title":"edit_message_live_location()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.export_chat_invite_link","text":"Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id str | int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required Returns: Name Type Description str str Returns the new invite link as String on success.","title":"export_chat_invite_link()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.foward_message","text":"Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required from_chat_id int | str Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername) required message_id int Message identifier in the chat specified in from_chat_id required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content int | None Protects the contents of the forwarded message from forwarding and saving. Defaults to None. required","title":"foward_message()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.get_chat","text":"Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.) Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required Returns: Name Type Description Chat Chat Returns True on success.","title":"get_chat()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.get_chat_administrators","text":"Use this method to get a list of administrators in a chat, which aren't bots Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required Returns: Type Description list [ ChatMember ] list[ChatMember]: Returns an Array of ChatMember objects.","title":"get_chat_administrators()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.get_chat_member","text":"Use this method to get information about a member of a chat Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername) required user_id int Unique identifier of the target user required Returns: Name Type Description ChatMember ChatMember Returns a ChatMember object on success.","title":"get_chat_member()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.get_chat_member_count","text":"Use this method to get the number of members in a chat Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required Returns: Name Type Description int int Returns Int on success.","title":"get_chat_member_count()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.get_chat_menu_button","text":"Use this method to get the current value of the bot's menu button in a private chat, or the default menu butto Parameters: Name Type Description Default chat_id int | None Unique identifier for the target private chat. If not specified, default bot's menu button will be returned. Defaults to None. required Returns: Name Type Description MenuButton MenuButton Returns MenuButton on success.","title":"get_chat_menu_button()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.get_file","text":"Use this method to get basic information about a file and prepare it for downloading. Parameters: Name Type Description Default file_id int File identifier to get information about. required","title":"get_file()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.get_forum_topic_icon_stickers","text":"Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns: Type Description list [ Sticker ] list[Sticker]: Returns an Array of Sticker objects.","title":"get_forum_topic_icon_stickers()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.get_me","text":"A simple method for testing your bot's authentication token. Requires no parameters. Returns basic information about the bot in form of a User object.","title":"get_me()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.get_my_commands","text":"Use this method to get the current list of the bot's commands for the given scope and user language. Parameters: Name Type Description Default scope BotCommandScope | None A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault. required language_code str | None A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands. Defaults to None. required Returns: Type Description list [ BotCommand ] | list list[BotCommand] | list: Returns an Array of BotCommand objects. If commands aren't set, an empty list is returned.","title":"get_my_commands()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.get_my_default_administrator_rights","text":"Use this method to get the current default administrator rights of the bot. Parameters: Name Type Description Default for_channels bool | None Pass True to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned. Defaults to None. required Returns: Name Type Description ChatAdministratorRights ChatAdministratorRights Returns ChatAdministratorRights on success.","title":"get_my_default_administrator_rights()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.get_updates","text":"Use this method to receive incoming updates using long polling (wiki). Returns an Array of Update objects. Parameters: Name Type Description Default offset int Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will forgotten. required limit int Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100. required timeout int Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only. required allowed_updates list [ str ] A JSON-serialized list of the update types you want your bot to receive. For example, specify [\u201cmessage\u201d, \u201cedited_channel_post\u201d, \u201ccallback_query\u201d] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used. Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time. required Returns: Name Type Description Update list [ Update ] Returns a list of Updates on success","title":"get_updates()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.get_user_profile_photos","text":"Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object. Parameters: Name Type Description Default user_id int Unique identifier of the target user. required offset int | None Sequential number of the first photo to be returned. By default, all photos are returned. Defaults to None. required limit int | None Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100. Defaults to None. required","title":"get_user_profile_photos()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.leave_chat","text":"Use this method for your bot to leave a group, supergroup or channel. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required Returns: Name Type Description bool bool Returns True on success.","title":"leave_chat()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.logout","text":"Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters.","title":"logout()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.pin_chat_message","text":"Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required message_id int Identifier of a message to pin required disable_notification bool | None Pass True if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"pin_chat_message()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.promote_chat_member","text":"Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Parameters: Name Type Description Default chat_id int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required user_id int Unique identifier of the target user required is_anonymous bool | None Pass True if the administrator's presence in the chat is hidden. Defaults to None. required can_manage_chat bool | None Pass True if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege. Defaults to None. required can_post_messages bool | None Pass True if the administrator can create channel posts, channels only. Defaults to None. required can_edit_messages bool | None Pass True if the administrator can edit messages of other users and can pin messages, channels only. Defaults to None. required can_delete_messages bool | None Pass True if the administrator can delete messages of other users. Defaults to None. required can_manage_video_chats bool | None Pass True if the administrator can manage video chats. Defaults to None. required can_restrict_members bool | None Pass True if the administrator can restrict, ban or unban chat members. Defaults to None. required can_promote_members bool | None Pass True if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him). Defaults to None. required can_change_info bool | None Pass True if the administrator can change chat title, photo and other settings. Defaults to None. required can_invite_users bool | None Pass True if the administrator can invite new users to the chat. Defaults to None. required can_pin_messages bool | None Pass True if the administrator can pin messages, supergroups only. Defaults to None. required can_manage_topics bool | None Pass True if the user is allowed to create, rename, close, and reopen forum topics, supergroups only. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"promote_chat_member()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.reopen_forum_topic","text":"Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required message_thread_id int Unique identifier for the target message thread of the forum topic required Returns: Name Type Description bool bool Returns True on success","title":"reopen_forum_topic()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.restrict_chat_member","text":"Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). required user_id int Unique identifier of the target user. required permissions ChatPermissions A JSON-serialized object for new user permissions. required until_date str | None Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"restrict_chat_member()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.revoke_chat_invite_link","text":"Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id int | str Unique identifier of the target chat or username of the target channel (in the format @channelusername). required invite_link str The invite link to revoke. required Returns: Name Type Description ChatInviteLink ChatInviteLink Returns the revoked invite link as ChatInviteLink object.","title":"revoke_chat_invite_link()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_animation","text":"Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required animation InputFile | str Animation to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data required message_thread_id str | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required duration int | None Duration of sent animation in seconds. Defaults to None. required width int | None Animation width. Defaults to None. required height int | None Animation height. Defaults to None. required thumb InputFile | str | None Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. Defaults to None. required caption str | None Animation caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the video caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required supports_streaming bool | None Pass True if the uploaded video is suitable for streaming. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"send_animation()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_audio","text":"Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required photo InputFile | str Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required caption str | None Audio caption, 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the audio caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required duration int | None Duration of the audio in seconds. Defaults to None. required performer str | None Performer. Defaults to None required title str | None Track name. Defaults None. required thumb InputFile | str | None Thumbnail of the file sent. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id bool | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"send_audio()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_chat_action","text":"Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success. Parameters: Name Type Description Default chat_id int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required action str Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_voice or upload_voice for voice notes, upload_document for general files, choose_sticker for stickers, find_location for location data, record_video_note or upload_video_note for video notes. required","title":"send_chat_action()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_contact","text":"Use this method to send phone contacts. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int Unique identifier for the target chat or username of the target channel (in the format @channelusername) required phone_number int Contact's phone number required first_name str Contact's first name required last_name str | None Contact's last name. Defaults to None. required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required vcard str | None Additional data about the contact in the form of a vCard, 0-2048 bytes. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_messge_id bool | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply | None Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"send_contact()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_dice","text":"Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required emoji str | None Emoji on which the dice throw animation is based. Currently, must be one of \u201c\ud83c\udfb2\u201d, \u201c\ud83c\udfaf\u201d, \u201c\ud83c\udfc0\u201d, \u201c\u26bd\u201d, \u201c\ud83c\udfb3\u201d, or \u201c\ud83c\udfb0\u201d. Dice can have values 1-6 for \u201c\ud83c\udfb2\u201d, \u201c\ud83c\udfaf\u201d and \u201c\ud83c\udfb3\u201d, values 1-5 for \u201c\ud83c\udfc0\u201d and \u201c\u26bd\u201d, and values 1-64 for \u201c\ud83c\udfb0\u201d. Defaults to \u201c\ud83c\udfb2\u201d. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply | None Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"send_dice()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_document","text":"Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required document InputFile | str File to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required caption str | None Document caption(may also be used when resending documents by file_id), 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the audio caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required disable_content_type_detection bool | None Disables automatic server-side content type detection for files uploaded using multipart/form-data. Deafults to None. required thumb InputFile | str | None Thumbnail of the file sent. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id bool | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"send_document()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_location","text":"Use this method to send point on the map. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required latitude float Latitude of the location required longitude float Longitude of the location required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required horizontal_accuracy float | None The radius of uncertainty for the location, measured in meters; 0-1500. Defaults to None. required live_period int | None Period in seconds for which the location will be updated (see Live Locations, should be between 60 and 86400. Defaults to None. required heading int | None For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. Defaults to None. required proximity_alert_radius int | None For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"send_location()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_media_group","text":"Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required media list [ InputMediaAudio | InputMediaDocument | InputMediaPhoto | InputMediaVideo ] A JSON-serialized array describing messages to be sent, must include 2-10 items. required message_thread_id str | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required","title":"send_media_group()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_message","text":"Use this method to send text messages. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required text str Text of the message to be sent, 1-4096 characters after entities parsing required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required parse_mode str | None Mode for parsing entities in the message text. Defaults to None. required entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in message text, which can be specified instead of parse_mode. Defaults to None. required disable_web_page_preview bool | None Disables link previews for links in this message. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"send_message()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_photo","text":"Use this method to send photos. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required photo InputFile | str Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required caption str | None Photo caption (may also be used when resending photos by file_id), 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the photo caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id bool | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"send_photo()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_poll","text":"Use this method to send a native poll. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required question str Poll question, 1-300 characters required options list [ str ] A JSON-serialized list of answer options, 2-10 strings 1-100 characters each. required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required is_anonymous bool | None True, if the poll needs to be anonymous, defaults to True. Defaults to None. required type str | None Poll type, \u201cquiz\u201d or \u201cregular\u201d. Defaults to \u201cregular\u201d. required allows_multiple_answers bool | None True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False. Defaults to None. required correct_option_id int | None 0-based identifier of the correct answer option, required for polls in quiz mode. Defaults to None. required explanation str | None Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing. Defaults to None. required explanation_parse_mode str | None Mode for parsing entities in the explanation. Defaults to None. required explanation_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the poll explanation, which can be specified instead of parse_mode. Defaults to None. required open_period int | None Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date. Defaults to None. required close_date int | None Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with open_period. Defaults to None. required is_closed bool | None Pass True if the poll needs to be immediately closed. This can be useful for poll preview.. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id bool | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply | None Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"send_poll()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_venue","text":"Use this method to send information about a venue. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int Unique identifier for the target chat or username of the target channel (in the format @channelusername) required latitude float Latitude of the venue required longitude float Longitude of the venue required title str Name of the venue required address str Address of the venue required message_thread_id int | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. required foursquare_id str | None Foursquare identifier of the venue. Defaults to None. required foursquare_type str | None Foursquare type of the venue, if known. (For example, \u201carts_entertainment/default\u201d, \u201carts_entertainment/aquarium\u201d or \u201cfood/icecream\u201d.). Defaults to None. required google_place_id str | None Google Places identifier of the venue. Defaults to None. required google_place_type str | None Google Places type of the venue. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply | None description . Defaults to None. required","title":"send_venue()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_video","text":"Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required video InputFile | str Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data required message_thread_id str | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required duration int | None Duration of sent video in seconds. Defaults to None. required width int | None Video width. Defaults to None. required height int | None Video height. Defaults to None. required thumb InputFile | str | None Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. Defaults to None. required caption str | None Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the video caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required supports_streaming bool | None Pass True if the uploaded video is suitable for streaming. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"send_video()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_video_note","text":"As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required video_note InputFile | str Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data required message_thread_id str | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required duration int | None Duration of sent video in seconds. Defaults to None. required height int | None Video height. Defaults to None. required thumb InputFile | str | None Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. Defaults to None. required caption str | None Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the video caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"send_video_note()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.send_voice","text":"Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required voice InputFile | str Audio file to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data required message_thread_id str | None Unique identifier for the target message thread (topic) of the forum; for forum supergroups only. Defaults to None. required duration int | None Duration of sent video in seconds. Defaults to None. required caption str | None Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing. Defaults to None. required parse_mode str | None Mode for parsing entities in the video caption. Defaults to None. required caption_entities list [ MessageEntity ] | None A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode. Defaults to None. required disable_notification bool | None Sends the message silently. Users will receive a notification with no sound. Defaults to None. required protect_content bool | None Protects the contents of the sent message from forwarding and saving. Defaults to None. required reply_to_message_id int | None If the message is a reply, ID of the original message. Defaults to None. required allow_sending_without_reply bool | None Pass True if the message should be sent even if the specified replied-to message is not found. Defaults to None. required reply_markup InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. Defaults to None. required","title":"send_voice()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.set_chat_administrator_custom_title","text":"Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). required user_id int Unique identifier of the target user required custom_title str New custom title for the administrator; 0-16 characters, emoji are not allowed. required Returns: Name Type Description bool bool Returns True on success.","title":"set_chat_administrator_custom_title()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.set_chat_description","text":"Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required description str | None New chat description, 0-255 characters. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"set_chat_description()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.set_chat_menu_button","text":"Use this method to change the bot's menu button in a private chat, or the default menu button. Parameters: Name Type Description Default chat_id int | None Unique identifier for the target private chat. If not specified, default bot's menu button will be changed. Defaults to None. required menu_button MenuButton | None A JSON-serialized object for the bot's new menu button. Defaults to MenuButtonDefault. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"set_chat_menu_button()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.set_chat_permissions","text":"Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Parameters: Name Type Description Default chat_id str | int Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). required permissions ChatPermissions A JSON-serialized object for new default chat permissions. required Returns: Name Type Description bool bool Returns True on success.","title":"set_chat_permissions()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.set_chat_photo","text":"Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required photo InputFile New chat photo, uploaded using multipart/form-data required Returns: Name Type Description bool bool Returns True on success.","title":"set_chat_photo()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.set_chat_sticker_set","text":"Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required sticker_set_name str Name of the sticker set to be set as the group sticker set required Returns: Name Type Description bool bool Returns True on success.","title":"set_chat_sticker_set()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.set_chat_title","text":"Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername) required title str New chat title, 1-128 characters required Returns: Name Type Description bool bool Returns True on success.","title":"set_chat_title()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.set_my_commands","text":"Use this method to change the list of the bot's commands. Parameters: Name Type Description Default commands list [ BotCommand ] A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified. required scope BotCommandScope | None A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault. Defaults to None. required language_code str | None A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"set_my_commands()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.set_my_default_administrator_rights","text":"Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are are free to modify the list before adding the bot Parameters: Name Type Description Default rights ChatAdministratorRights | None A JSON-serialized object describing new default administrator rights. If not specified, the default administrator rights will be cleared. Defaults to None. required for_channels bool | None Pass True to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"set_my_default_administrator_rights()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.stop_message_live_location","text":"Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned. Parameters: Name Type Description Default chat_id int | None Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername) required message_id int | None Required if inline_message_id is not specified. Identifier of the message with live location to stop. Defaults to None. required inline_message_id int | None Required if chat_id and message_id are not specified. Identifier of the inline message. Defaults to None. required reply_markup InlineKeyboardMarkup | None A JSON-serialized object for a new inline keyboard. Defaults to None. required","title":"stop_message_live_location()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.unban_chat_member","text":"Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername). required user_id int Unique identifier of the target user. required only_if_banned bool | None Do nothing if the user is not banned. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"unban_chat_member()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.unban_chat_sender_chat","text":"Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Parameters: Name Type Description Default chat_id str | int Unique identifier for the target chat or username of the target channel (in the format @channelusername). required sender_chat_id int Unique identifier of the target sender chat. required Returns: Name Type Description bool bool Returns True on success.","title":"unban_chat_sender_chat()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.unpin_all_chat_message","text":"Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required Returns: Name Type Description bool bool Returns True on success.","title":"unpin_all_chat_message()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.unpin_all_forum_topic_messages","text":"Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) required message_thread_id int Unique identifier for the target message thread of the forum topic required Returns: Name Type Description bool bool Returns True on success.","title":"unpin_all_forum_topic_messages()"},{"location":"reference/api/genapi/#autotelegram.telegram.api.BotAPI.unpin_chat_message","text":"Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Parameters: Name Type Description Default chat_id int | str Unique identifier for the target chat or username of the target channel (in the format @channelusername). required message_id int | None Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned. Defaults to None. required Returns: Name Type Description bool bool Returns True on success.","title":"unpin_chat_message()"},{"location":"reference/api/inlineapi/","text":"","title":"inline api"},{"location":"reference/api/passportapi/","text":"","title":"passport api"},{"location":"reference/api/paymentsapi/","text":"","title":"payments api"},{"location":"reference/api/stickersapi/","text":"","title":"stickers api"},{"location":"reference/objects/games/games/","text":"","title":"games"},{"location":"reference/objects/gen/animation/","text":"Animation Bases: BaseObject This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound). Parameters: Name Type Description Default file_id str) Identifier for this file, which can be used to download or reuse the file None file_unique_id str) Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None width int) Video width as defined by sender None height int) Video height as defined by sender None duration int) Duration of the video in seconds as defined by sender None thumb obj) Optional. Animation thumbnail as defined by sender required file_name str) Optional. Original animation filename as defined by sender required mime_type str) Optional. MIME type of the file as defined by sender required file_size int) Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. required","title":"animation"},{"location":"reference/objects/gen/animation/#autotelegram.telegram.objects.animation.Animation","text":"Bases: BaseObject This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound). Parameters: Name Type Description Default file_id str) Identifier for this file, which can be used to download or reuse the file None file_unique_id str) Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None width int) Video width as defined by sender None height int) Video height as defined by sender None duration int) Duration of the video in seconds as defined by sender None thumb obj) Optional. Animation thumbnail as defined by sender required file_name str) Optional. Original animation filename as defined by sender required mime_type str) Optional. MIME type of the file as defined by sender required file_size int) Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. required","title":"Animation"},{"location":"reference/objects/gen/audio/","text":"Audio Bases: BaseObject This object represents an audio file to be treated as music by the Telegram clients. Parameters: Name Type Description Default file_id str Unique identifier for this file None file_unique_id str Unique identifier for this file, which is supposed to be the same over time and for different bots. None duration int Optional Duration of the audio in seconds as defined by sender required performer str Optional. Performer of the audio as defined by sender or by audio tags required title str Optional. Title of the audio as defined by sender or by audio tags required file_name str Optional. Original filename as defined by sender required mime_type str Optional. MIME type of the file as defined by sender required file_size int Optional. File size required thumb obj: PhotoSize , optional): Optional. Thumbnail of the album cover to which the music file belongs required","title":"audio"},{"location":"reference/objects/gen/audio/#autotelegram.telegram.objects.audio.Audio","text":"Bases: BaseObject This object represents an audio file to be treated as music by the Telegram clients. Parameters: Name Type Description Default file_id str Unique identifier for this file None file_unique_id str Unique identifier for this file, which is supposed to be the same over time and for different bots. None duration int Optional Duration of the audio in seconds as defined by sender required performer str Optional. Performer of the audio as defined by sender or by audio tags required title str Optional. Title of the audio as defined by sender or by audio tags required file_name str Optional. Original filename as defined by sender required mime_type str Optional. MIME type of the file as defined by sender required file_size int Optional. File size required thumb obj: PhotoSize , optional): Optional. Thumbnail of the album cover to which the music file belongs required","title":"Audio"},{"location":"reference/objects/gen/base/","text":"","title":"base"},{"location":"reference/objects/gen/botcommand/","text":"BotCommandScopeAllChatAdministrators Bases: BaseObject Represents the scope of bot commands, covering all group and supergroup chat administrators. https://core.telegram.org/bots/api#botcommandscopeallchatadministrators Parameters: Name Type Description Default type obj: str ): Scope type, must be all_chat_administrators. None BotCommandScopeAllGroupChats Bases: BaseObject Represents the scope of bot commands, covering all group and supergroup chats. https://core.telegram.org/bots/api#botcommandscopeallgroupchats Parameters: Name Type Description Default type obj: str ): Scope type, must be all_group_chats. None BotCommandScopeAllPrivateChats Bases: BaseObject Represents the scope of bot commands, covering all private chats. https://core.telegram.org/bots/api#botcommandscopeallprivatechats Parameters: Name Type Description Default type obj: str ): Scope type, must be all_private_chats. None BotCommandScopeChat Bases: BaseObject Represents the scope of bot commands, covering a specific chat. https://core.telegram.org/bots/api#botcommandscopechat Parameters: Name Type Description Default type obj: str ): Scope type, must be chat. None chat_id obj: int ): Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). None BotCommandScopeChatAdministrators Bases: BaseObject Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat. https://core.telegram.org/bots/api#botcommandscopechatadministrators Parameters: Name Type Description Default type obj: str ): Scope type, must be chat_administrators. None chat_id obj: int ): Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). None BotCommandScopeChatMember Bases: BaseObject Represents the scope of bot commands, covering a specific member of a group or supergroup chat. https://core.telegram.org/bots/api#botcommandscopechatmember Parameters: Name Type Description Default type obj: str ): Scope type, must be chat_member. None chat_id obj: int ): Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). None user_id obj: int ): Unique identifier of the target user. None BotCommandScopeDefault Bases: BaseObject Represents the default scope of bot commands. Default commands are used if no commands with a narrower scope are specified for the user. https://core.telegram.org/bots/api#botcommandscopedefault Parameters: Name Type Description Default type obj: str ): Scope type, must be default. None","title":"botcommand"},{"location":"reference/objects/gen/botcommand/#autotelegram.telegram.objects.botcommand.BotCommandScopeAllChatAdministrators","text":"Bases: BaseObject Represents the scope of bot commands, covering all group and supergroup chat administrators. https://core.telegram.org/bots/api#botcommandscopeallchatadministrators Parameters: Name Type Description Default type obj: str ): Scope type, must be all_chat_administrators. None","title":"BotCommandScopeAllChatAdministrators"},{"location":"reference/objects/gen/botcommand/#autotelegram.telegram.objects.botcommand.BotCommandScopeAllGroupChats","text":"Bases: BaseObject Represents the scope of bot commands, covering all group and supergroup chats. https://core.telegram.org/bots/api#botcommandscopeallgroupchats Parameters: Name Type Description Default type obj: str ): Scope type, must be all_group_chats. None","title":"BotCommandScopeAllGroupChats"},{"location":"reference/objects/gen/botcommand/#autotelegram.telegram.objects.botcommand.BotCommandScopeAllPrivateChats","text":"Bases: BaseObject Represents the scope of bot commands, covering all private chats. https://core.telegram.org/bots/api#botcommandscopeallprivatechats Parameters: Name Type Description Default type obj: str ): Scope type, must be all_private_chats. None","title":"BotCommandScopeAllPrivateChats"},{"location":"reference/objects/gen/botcommand/#autotelegram.telegram.objects.botcommand.BotCommandScopeChat","text":"Bases: BaseObject Represents the scope of bot commands, covering a specific chat. https://core.telegram.org/bots/api#botcommandscopechat Parameters: Name Type Description Default type obj: str ): Scope type, must be chat. None chat_id obj: int ): Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). None","title":"BotCommandScopeChat"},{"location":"reference/objects/gen/botcommand/#autotelegram.telegram.objects.botcommand.BotCommandScopeChatAdministrators","text":"Bases: BaseObject Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat. https://core.telegram.org/bots/api#botcommandscopechatadministrators Parameters: Name Type Description Default type obj: str ): Scope type, must be chat_administrators. None chat_id obj: int ): Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). None","title":"BotCommandScopeChatAdministrators"},{"location":"reference/objects/gen/botcommand/#autotelegram.telegram.objects.botcommand.BotCommandScopeChatMember","text":"Bases: BaseObject Represents the scope of bot commands, covering a specific member of a group or supergroup chat. https://core.telegram.org/bots/api#botcommandscopechatmember Parameters: Name Type Description Default type obj: str ): Scope type, must be chat_member. None chat_id obj: int ): Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). None user_id obj: int ): Unique identifier of the target user. None","title":"BotCommandScopeChatMember"},{"location":"reference/objects/gen/botcommand/#autotelegram.telegram.objects.botcommand.BotCommandScopeDefault","text":"Bases: BaseObject Represents the default scope of bot commands. Default commands are used if no commands with a narrower scope are specified for the user. https://core.telegram.org/bots/api#botcommandscopedefault Parameters: Name Type Description Default type obj: str ): Scope type, must be default. None","title":"BotCommandScopeDefault"},{"location":"reference/objects/gen/callbackquery/","text":"CallBackQuery Bases: BaseObject This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present. Parameters: Name Type Description Default id str Unique identifier for this query None from telegram . objects . user . User Sender required message Optional [ telegram . objects . message . Message ] Optional. Message with the callback button that originated the query. Note that message content and message date will not be available if the message is too old required inline_message_id Optional [ str ] Optional. Identifier of the message sent via the bot in inline mode, that originated the query. required chat_instance str Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games. None data Optional [ str ] Optional. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field. required game_short_name Optional [ str ] Optional. Short name of a Game to be returned, serves as the unique identifier for the game required answer ( ** kwargs ) async use this method to answer callback_queries sent from inlinekeyboards. This calls the answer_callbackquery context api method under the hood and takes in its arguments except the callback_query_id .","title":"callbackquery"},{"location":"reference/objects/gen/callbackquery/#autotelegram.telegram.objects.callbackquery.CallBackQuery","text":"Bases: BaseObject This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present. Parameters: Name Type Description Default id str Unique identifier for this query None from telegram . objects . user . User Sender required message Optional [ telegram . objects . message . Message ] Optional. Message with the callback button that originated the query. Note that message content and message date will not be available if the message is too old required inline_message_id Optional [ str ] Optional. Identifier of the message sent via the bot in inline mode, that originated the query. required chat_instance str Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games. None data Optional [ str ] Optional. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field. required game_short_name Optional [ str ] Optional. Short name of a Game to be returned, serves as the unique identifier for the game required","title":"CallBackQuery"},{"location":"reference/objects/gen/callbackquery/#autotelegram.telegram.objects.callbackquery.CallBackQuery.answer","text":"use this method to answer callback_queries sent from inlinekeyboards. This calls the answer_callbackquery context api method under the hood and takes in its arguments except the callback_query_id .","title":"answer()"},{"location":"reference/objects/gen/chat/","text":"Chat Bases: BaseObject This object represents a chat. Parameters: Name Type Description Default id int Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may None type str Type of chat, can be either \u201cprivate\u201d, \u201cgroup\u201d, \u201csupergroup\u201d or \u201cchannel\u201d None title str Optional. Title, for supergroups, channels and group chats required username str Optional. Username, for private chats, supergroups and channels if available required first_name str Optional. First name of the other party in a private chat required last_name str Optional. Last name of the other party in a private chat required all_members_are_administrators bool Optional. True if a group has \u2018All Members Are Admins\u2019 enabled. required photo obj: ChatPhoto , optional): Optional. Chat photo. Returned only in getChat. required description str Optional. Description, for supergroups and channel chats. Returned only in getChat. required invite_link str Optional. Chat invite link, for supergroups and channel chats. Returned only in getChat. required pinned_message obj: Message , optional): Optional. Pinned message, for supergroups and channel chats. Returned only in getChat. required sticker_set_name str Optional. For supergroups, name of group sticker set. Returned only in getChat. required can_set_sticker_set bool Optional. True, if the bot can change the group sticker set. Returned only in getChat. required linked_chat_id int Optional. The minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in getChat. required location obj: ChatLocation , optional): Optional. Default chat member permissions, for groups and supergroups. Returned only in getChat. required bio str Optional. A description for the group, shown on the group\u2019s profile page. Returned only in getChat. required has_private_forwards bool Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required has_restricted_voice_and_video_messages bool Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required join_to_send_messages bool Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required join_by_request bool Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required permissions obj: ChatPermissions , optional): Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required slow_mode_delay int Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required message_auto_delete_time int Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required ChatAdministratorRights Bases: BaseObject This object represents the rights of a chat administrator. Refer to the Telegram API documentation <https://core.telegram.org/bots/api#chatadministrator> _ for more information. Parameters: Name Type Description Default is_anonymous (bool True, if the user's presence in the chat is hidden None can_manage_chat bool True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege None can_delete_messages (bool True, if the administrator can delete messages of other users None can_manage_video_chats bool True, if the administrator can manage video chats None can_restrict_members bool True, if the administrator can restrict, ban or unban chat members None can_promote_members (bool True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user) None can_change_info bool True, if the user is allowed to change the chat title, photo and other settings None can_invite_users bool True, if the user is allowed to invite new users to the chat None can_post_messages bool Optional. True, if the administrator can post in the channel; channels only required can_edit_messages bool Optional. True, if the administrator can edit messages of other users and can pin messages; channels only required can_pin_messages bool Optional. True, if the user is allowed to pin messages; groups and supergroups only required can_manage_topics bool Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; supergroups only required ChatInviteLink Bases: BaseObject This object represents an invite link for a chat. Refer to the Telegram API documentation <https://core.telegram.org/bots/api#chatinvitelink> _ for more information. Parameters: Name Type Description Default invite_link str The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with \u201c\u2026\u201d. None creator User Creator of the link None is_primary bool True, if the link is primary None is_revoked bool True, if the link is revoked None expire_date int Optional. Point in time (Unix timestamp) when the link will expire or has been expired required member_limit int Optional. Maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999 required ChatJoinRequest Bases: BaseObject This object represents a chat member that has joined the chat by an invite link. Refer to the Telegram API documentation <https://core.telegram.org/bots/api#chatjoinrequest> _ for more information. Parameters: Name Type Description Default user User User that requested to join the chat None status str Optional. The member's status in the chat. Can be \u201ccreator\u201d, \u201cadministrator\u201d, \u201cmember\u201d, \u201crestricted\u201d, \u201cleft\u201d or \u201ckicked\u201d required ChatLocation Bases: BaseObject This object represents a location to which a chat is connected. Refer to the Telegram API documentation <https://core.telegram.org/bots/api#chatlocation> _ for more information. Parameters: Name Type Description Default location Location The location to which the supergroup is connected. Can't be a live location. None address str Location address; 1-64 characters, as defined by the chat owner None ChatPermissions Bases: BaseObject This object describes actions that a non-administrator user is allowed to take in a chat. Refer to the Telegram API documentation <https://core.telegram.org/bots/api#chatpermissions> _ for more information. Parameters: Name Type Description Default can_send_messages bool Optional. True, if the user is allowed to send text messages, contacts, locations and venues required can_send_media_messages bool Optional. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages required can_send_polls bool Optional. True, if the user is allowed to send polls, implies can_send_messages required can_send_other_messages bool Optional. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can_send_media_messages required can_add_web_page_previews bool Optional. True, if the user is allowed to add web page previews to their messages, implies can_send_media_messages required can_change_info bool Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups required can_invite_users bool Optional. True, if the user is allowed to invite new users to the chat required can_pin_messages bool Optional. True, if the user is allowed to pin messages. Ignored in public supergroups required ChatPhoto Bases: BaseObject This object represents a chat photo. Refer to the Telegram API documentation <https://core.telegram.org/bots/api#chatphoto> _ for more information. Parameters: Name Type Description Default small_file_id str Unique file identifier of small (160x160) chat photo. This file_id can be used only for photo download. None small_file_unique_id str Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None big_file_id str Unique file identifier of big (640x640) chat photo. This file_id can be used only for photo download. None big_file_unique_id str Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None","title":"chat"},{"location":"reference/objects/gen/chat/#autotelegram.telegram.objects.chat.Chat","text":"Bases: BaseObject This object represents a chat. Parameters: Name Type Description Default id int Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may None type str Type of chat, can be either \u201cprivate\u201d, \u201cgroup\u201d, \u201csupergroup\u201d or \u201cchannel\u201d None title str Optional. Title, for supergroups, channels and group chats required username str Optional. Username, for private chats, supergroups and channels if available required first_name str Optional. First name of the other party in a private chat required last_name str Optional. Last name of the other party in a private chat required all_members_are_administrators bool Optional. True if a group has \u2018All Members Are Admins\u2019 enabled. required photo obj: ChatPhoto , optional): Optional. Chat photo. Returned only in getChat. required description str Optional. Description, for supergroups and channel chats. Returned only in getChat. required invite_link str Optional. Chat invite link, for supergroups and channel chats. Returned only in getChat. required pinned_message obj: Message , optional): Optional. Pinned message, for supergroups and channel chats. Returned only in getChat. required sticker_set_name str Optional. For supergroups, name of group sticker set. Returned only in getChat. required can_set_sticker_set bool Optional. True, if the bot can change the group sticker set. Returned only in getChat. required linked_chat_id int Optional. The minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in getChat. required location obj: ChatLocation , optional): Optional. Default chat member permissions, for groups and supergroups. Returned only in getChat. required bio str Optional. A description for the group, shown on the group\u2019s profile page. Returned only in getChat. required has_private_forwards bool Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required has_restricted_voice_and_video_messages bool Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required join_to_send_messages bool Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required join_by_request bool Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required permissions obj: ChatPermissions , optional): Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required slow_mode_delay int Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required message_auto_delete_time int Optional. True, if the group has a discussion group for administrators. Returned only in getChat. required","title":"Chat"},{"location":"reference/objects/gen/chat/#autotelegram.telegram.objects.chat.ChatAdministratorRights","text":"Bases: BaseObject This object represents the rights of a chat administrator. Refer to the Telegram API documentation <https://core.telegram.org/bots/api#chatadministrator> _ for more information. Parameters: Name Type Description Default is_anonymous (bool True, if the user's presence in the chat is hidden None can_manage_chat bool True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege None can_delete_messages (bool True, if the administrator can delete messages of other users None can_manage_video_chats bool True, if the administrator can manage video chats None can_restrict_members bool True, if the administrator can restrict, ban or unban chat members None can_promote_members (bool True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user) None can_change_info bool True, if the user is allowed to change the chat title, photo and other settings None can_invite_users bool True, if the user is allowed to invite new users to the chat None can_post_messages bool Optional. True, if the administrator can post in the channel; channels only required can_edit_messages bool Optional. True, if the administrator can edit messages of other users and can pin messages; channels only required can_pin_messages bool Optional. True, if the user is allowed to pin messages; groups and supergroups only required can_manage_topics bool Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; supergroups only required","title":"ChatAdministratorRights"},{"location":"reference/objects/gen/chat/#autotelegram.telegram.objects.chat.ChatInviteLink","text":"Bases: BaseObject This object represents an invite link for a chat. Refer to the Telegram API documentation <https://core.telegram.org/bots/api#chatinvitelink> _ for more information. Parameters: Name Type Description Default invite_link str The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with \u201c\u2026\u201d. None creator User Creator of the link None is_primary bool True, if the link is primary None is_revoked bool True, if the link is revoked None expire_date int Optional. Point in time (Unix timestamp) when the link will expire or has been expired required member_limit int Optional. Maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999 required","title":"ChatInviteLink"},{"location":"reference/objects/gen/chat/#autotelegram.telegram.objects.chat.ChatJoinRequest","text":"Bases: BaseObject This object represents a chat member that has joined the chat by an invite link. Refer to the Telegram API documentation <https://core.telegram.org/bots/api#chatjoinrequest> _ for more information. Parameters: Name Type Description Default user User User that requested to join the chat None status str Optional. The member's status in the chat. Can be \u201ccreator\u201d, \u201cadministrator\u201d, \u201cmember\u201d, \u201crestricted\u201d, \u201cleft\u201d or \u201ckicked\u201d required","title":"ChatJoinRequest"},{"location":"reference/objects/gen/chat/#autotelegram.telegram.objects.chat.ChatLocation","text":"Bases: BaseObject This object represents a location to which a chat is connected. Refer to the Telegram API documentation <https://core.telegram.org/bots/api#chatlocation> _ for more information. Parameters: Name Type Description Default location Location The location to which the supergroup is connected. Can't be a live location. None address str Location address; 1-64 characters, as defined by the chat owner None","title":"ChatLocation"},{"location":"reference/objects/gen/chat/#autotelegram.telegram.objects.chat.ChatPermissions","text":"Bases: BaseObject This object describes actions that a non-administrator user is allowed to take in a chat. Refer to the Telegram API documentation <https://core.telegram.org/bots/api#chatpermissions> _ for more information. Parameters: Name Type Description Default can_send_messages bool Optional. True, if the user is allowed to send text messages, contacts, locations and venues required can_send_media_messages bool Optional. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages required can_send_polls bool Optional. True, if the user is allowed to send polls, implies can_send_messages required can_send_other_messages bool Optional. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can_send_media_messages required can_add_web_page_previews bool Optional. True, if the user is allowed to add web page previews to their messages, implies can_send_media_messages required can_change_info bool Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups required can_invite_users bool Optional. True, if the user is allowed to invite new users to the chat required can_pin_messages bool Optional. True, if the user is allowed to pin messages. Ignored in public supergroups required","title":"ChatPermissions"},{"location":"reference/objects/gen/chat/#autotelegram.telegram.objects.chat.ChatPhoto","text":"Bases: BaseObject This object represents a chat photo. Refer to the Telegram API documentation <https://core.telegram.org/bots/api#chatphoto> _ for more information. Parameters: Name Type Description Default small_file_id str Unique file identifier of small (160x160) chat photo. This file_id can be used only for photo download. None small_file_unique_id str Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None big_file_id str Unique file identifier of big (640x640) chat photo. This file_id can be used only for photo download. None big_file_unique_id str Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None","title":"ChatPhoto"},{"location":"reference/objects/gen/chatmember/","text":"ChatMember Bases: BaseObject This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported: * ChatMemberOwner * ChatMemberAdministrator * ChatMemberMember * ChatMemberRestricted * ChatMemberLeft * ChatMemberBanned ChatMemberAdministrator Bases: BaseObject Represents a chat member that has some additional privileges. https://core.telegram.org/bots/api#chatmemberadministrator Parameters: Name Type Description Default status obj: str ): The member's status in the chat, always \u201cadministrator\u201d. None user obj: User ): Information about the user. None custom_title obj: str ): Optional Custom title for this user. required can_be_edited obj: bool ): True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege. None can_manage_chat obj: bool ): True, if the administrator can create channel posts, channels only. None can_post_messages obj: bool ): Optional True, if the administrator can post in the channel; channels only required can_edit_messages obj: bool ): Optional True, if the administrator can edit messages of other users and can pin messages; channels only. required can_delete_messages obj: bool ): True, if the administrator can delete messages of other users. None can_manage_voice_chats obj: bool ): True, if the administrator can manage voice chats. None can_restrict_members obj: bool ): True, if the administrator can restrict, ban or unban chat members. None can_promote_members obj: bool ): True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user). None can_change_info obj: bool ): True, if the administrator can change chat title, photo and other settings. None can_invite_users obj: bool ): True, if the administrator can invite new users to the chat. None can_pin_messages obj: bool ): Optional True, if the administrator can pin messages; groups and supergroups only. required can_manage_topics obj: bool ): Optional True, if the administrator can manage chat threads; only for supergroups. required is_anonymous obj: bool ): True, if the administrator's presence in the chat is hidden. None ChatMemberBanned Bases: BaseObject Represents a chat member that was banned in the chat and can't return to the chat or view chat messages. https://core.telegram.org/bots/api#chatmemberbanned Parameters: Name Type Description Default status obj: str ): The member's status in the chat, always \u201ckicked\u201d. None user obj: User ): Information about the user. None until_date obj: int ): Date when restrictions will be lifted for this user; unix time. None ChatMemberLeft Bases: BaseObject Represents a chat member that isn't currently a member of the chat, but may join it themselves. https://core.telegram.org/bots/api#chatmemberleft Parameters: Name Type Description Default status obj: str ): The member's status in the chat, always \u201cleft\u201d. None user obj: User ): Information about the user. None ChatMemberMember Bases: BaseObject Represents a chat member that isn't currently a member of the chat, but may join it themselves. https://core.telegram.org/bots/api#chatmembermember Parameters: Name Type Description Default status obj: str ): The member's status in the chat, always \u201cmember\u201d. None user obj: User ): Information about the user. None ChatMemberOwner Bases: BaseObject Represents a chat member that owns the chat and has all administrator privileges. https://core.telegram.org/bots/api#chatmemberowner Parameters: Name Type Description Default status obj: str ): The member's status in the chat, always \u201ccreator\u201d. None user obj: User ): Information about the user. None is_anonymous obj: bool ): True, if the user's presence in the chat is hidden. None custom_title obj: str ): Optional Owner's custom title for the chat. required ChatMemberRestricted Bases: BaseObject Represents a chat member that has some additional privileges. https://core.telegram.org/bots/api#chatmemberrestricted Parameters: Name Type Description Default status obj: str ): The member's status in the chat, always \u201crestricted\u201d. None user obj: User ): Information about the user. None is_member obj: bool ): True, if the user is a member of the chat at the moment of the request. None can_change_info obj: bool ): True, if the user is allowed to change the chat title, photo and other settings. None can_invite_users obj: bool ): True, if the user is allowed to invite new users to the chat. None can_pin_messages obj: bool ): True, if the user is allowed to pin messages; groups and supergroups only. None can_send_messages obj: bool ): Optional True, if the user is allowed to send text messages, contacts, locations and venues. None can_send_media_messages obj: bool ): True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages. None can_send_polls obj: bool ): True, if the user is allowed to send polls, implies can_send_messages. None can_send_other_messages obj: bool ): True, if the user is allowed to send animations, games, stickers and use inline bots, implies can_send_media_messages. None can_add_web_page_previews obj: bool ): True, if the user is allowed to add web page previews to their messages, implies can_send_media_messages. None until_date obj: int ): Date when restrictions will be lifted for this user; unix time. None ChatMemberUpdated Bases: BaseObject This object represents changes in the status of a chat member. https://core.telegram.org/bots/api#chatmemberupdated Parameters: Name Type Description Default chat obj: Chat ): Chat the user belongs to. None from obj: User ): Performer of the action, which resulted in the change. required date obj: int ): Date the change was done in Unix time. None old_chat_member obj: ChatMember ): Previous information about the chat member. None new_chat_member obj: ChatMember ): New information about the chat member. None invite_link obj: ChatInviteLink ): Optional Chat invite link, which was used by the user to join the chat; for joining by invite link events only. required","title":"chatmember"},{"location":"reference/objects/gen/chatmember/#autotelegram.telegram.objects.chatmember.ChatMember","text":"Bases: BaseObject This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported: * ChatMemberOwner * ChatMemberAdministrator * ChatMemberMember * ChatMemberRestricted * ChatMemberLeft * ChatMemberBanned","title":"ChatMember"},{"location":"reference/objects/gen/chatmember/#autotelegram.telegram.objects.chatmember.ChatMemberAdministrator","text":"Bases: BaseObject Represents a chat member that has some additional privileges. https://core.telegram.org/bots/api#chatmemberadministrator Parameters: Name Type Description Default status obj: str ): The member's status in the chat, always \u201cadministrator\u201d. None user obj: User ): Information about the user. None custom_title obj: str ): Optional Custom title for this user. required can_be_edited obj: bool ): True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege. None can_manage_chat obj: bool ): True, if the administrator can create channel posts, channels only. None can_post_messages obj: bool ): Optional True, if the administrator can post in the channel; channels only required can_edit_messages obj: bool ): Optional True, if the administrator can edit messages of other users and can pin messages; channels only. required can_delete_messages obj: bool ): True, if the administrator can delete messages of other users. None can_manage_voice_chats obj: bool ): True, if the administrator can manage voice chats. None can_restrict_members obj: bool ): True, if the administrator can restrict, ban or unban chat members. None can_promote_members obj: bool ): True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user). None can_change_info obj: bool ): True, if the administrator can change chat title, photo and other settings. None can_invite_users obj: bool ): True, if the administrator can invite new users to the chat. None can_pin_messages obj: bool ): Optional True, if the administrator can pin messages; groups and supergroups only. required can_manage_topics obj: bool ): Optional True, if the administrator can manage chat threads; only for supergroups. required is_anonymous obj: bool ): True, if the administrator's presence in the chat is hidden. None","title":"ChatMemberAdministrator"},{"location":"reference/objects/gen/chatmember/#autotelegram.telegram.objects.chatmember.ChatMemberBanned","text":"Bases: BaseObject Represents a chat member that was banned in the chat and can't return to the chat or view chat messages. https://core.telegram.org/bots/api#chatmemberbanned Parameters: Name Type Description Default status obj: str ): The member's status in the chat, always \u201ckicked\u201d. None user obj: User ): Information about the user. None until_date obj: int ): Date when restrictions will be lifted for this user; unix time. None","title":"ChatMemberBanned"},{"location":"reference/objects/gen/chatmember/#autotelegram.telegram.objects.chatmember.ChatMemberLeft","text":"Bases: BaseObject Represents a chat member that isn't currently a member of the chat, but may join it themselves. https://core.telegram.org/bots/api#chatmemberleft Parameters: Name Type Description Default status obj: str ): The member's status in the chat, always \u201cleft\u201d. None user obj: User ): Information about the user. None","title":"ChatMemberLeft"},{"location":"reference/objects/gen/chatmember/#autotelegram.telegram.objects.chatmember.ChatMemberMember","text":"Bases: BaseObject Represents a chat member that isn't currently a member of the chat, but may join it themselves. https://core.telegram.org/bots/api#chatmembermember Parameters: Name Type Description Default status obj: str ): The member's status in the chat, always \u201cmember\u201d. None user obj: User ): Information about the user. None","title":"ChatMemberMember"},{"location":"reference/objects/gen/chatmember/#autotelegram.telegram.objects.chatmember.ChatMemberOwner","text":"Bases: BaseObject Represents a chat member that owns the chat and has all administrator privileges. https://core.telegram.org/bots/api#chatmemberowner Parameters: Name Type Description Default status obj: str ): The member's status in the chat, always \u201ccreator\u201d. None user obj: User ): Information about the user. None is_anonymous obj: bool ): True, if the user's presence in the chat is hidden. None custom_title obj: str ): Optional Owner's custom title for the chat. required","title":"ChatMemberOwner"},{"location":"reference/objects/gen/chatmember/#autotelegram.telegram.objects.chatmember.ChatMemberRestricted","text":"Bases: BaseObject Represents a chat member that has some additional privileges. https://core.telegram.org/bots/api#chatmemberrestricted Parameters: Name Type Description Default status obj: str ): The member's status in the chat, always \u201crestricted\u201d. None user obj: User ): Information about the user. None is_member obj: bool ): True, if the user is a member of the chat at the moment of the request. None can_change_info obj: bool ): True, if the user is allowed to change the chat title, photo and other settings. None can_invite_users obj: bool ): True, if the user is allowed to invite new users to the chat. None can_pin_messages obj: bool ): True, if the user is allowed to pin messages; groups and supergroups only. None can_send_messages obj: bool ): Optional True, if the user is allowed to send text messages, contacts, locations and venues. None can_send_media_messages obj: bool ): True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages. None can_send_polls obj: bool ): True, if the user is allowed to send polls, implies can_send_messages. None can_send_other_messages obj: bool ): True, if the user is allowed to send animations, games, stickers and use inline bots, implies can_send_media_messages. None can_add_web_page_previews obj: bool ): True, if the user is allowed to add web page previews to their messages, implies can_send_media_messages. None until_date obj: int ): Date when restrictions will be lifted for this user; unix time. None","title":"ChatMemberRestricted"},{"location":"reference/objects/gen/chatmember/#autotelegram.telegram.objects.chatmember.ChatMemberUpdated","text":"Bases: BaseObject This object represents changes in the status of a chat member. https://core.telegram.org/bots/api#chatmemberupdated Parameters: Name Type Description Default chat obj: Chat ): Chat the user belongs to. None from obj: User ): Performer of the action, which resulted in the change. required date obj: int ): Date the change was done in Unix time. None old_chat_member obj: ChatMember ): Previous information about the chat member. None new_chat_member obj: ChatMember ): New information about the chat member. None invite_link obj: ChatInviteLink ): Optional Chat invite link, which was used by the user to join the chat; for joining by invite link events only. required","title":"ChatMemberUpdated"},{"location":"reference/objects/gen/contact/","text":"Contact Bases: BaseObject This object represents a phone contact. Parameters: Name Type Description Default phone_number str) Contact's phone number None first_name str) Contact's first name None last_name str) Optional. Contact's last name required user_id int) Optional. Contact's user identifier in Telegram. required vcard str) Optional. Additional data about the contact in the form of a vCard required","title":"contact"},{"location":"reference/objects/gen/contact/#autotelegram.telegram.objects.contact.Contact","text":"Bases: BaseObject This object represents a phone contact. Parameters: Name Type Description Default phone_number str) Contact's phone number None first_name str) Contact's first name None last_name str) Optional. Contact's last name required user_id int) Optional. Contact's user identifier in Telegram. required vcard str) Optional. Additional data about the contact in the form of a vCard required","title":"Contact"},{"location":"reference/objects/gen/dice/","text":"Dice Bases: BaseObject This object represents an animated emoji that displays a random value. Parameters: Name Type Description Default emoji str) Emoji on which the dice throw animation is based None value int) Value of the dice, 1-6 for \u201c\ud83c\udfb2\u201d, \u201c\ud83c\udfaf\u201d and \u201c\ud83c\udfb3\u201d base emoji, 1-5 for \u201c\ud83c\udfc0\u201d and \u201c\u26bd\u201d base emoji, 1-64 for \u201c\ud83c\udfb0\u201d base emoji None","title":"dice"},{"location":"reference/objects/gen/dice/#autotelegram.telegram.objects.dice.Dice","text":"Bases: BaseObject This object represents an animated emoji that displays a random value. Parameters: Name Type Description Default emoji str) Emoji on which the dice throw animation is based None value int) Value of the dice, 1-6 for \u201c\ud83c\udfb2\u201d, \u201c\ud83c\udfaf\u201d and \u201c\ud83c\udfb3\u201d base emoji, 1-5 for \u201c\ud83c\udfc0\u201d and \u201c\u26bd\u201d base emoji, 1-64 for \u201c\ud83c\udfb0\u201d base emoji None","title":"Dice"},{"location":"reference/objects/gen/document/","text":"Document Bases: BaseObject This object represents a general file (as opposed to photos, voice messages and audio files). Parameters: Name Type Description Default file_id str) Identifier for this file, which can be used to download or reuse the file None file_unique_id str) Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None thumb obj) Optional. Document thumbnail as defined by sender required file_name str) Optional. Original filename as defined by sender required mime_type str) Optional. MIME type of the file as defined by sender required file_size int) Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. required","title":"document"},{"location":"reference/objects/gen/document/#autotelegram.telegram.objects.document.Document","text":"Bases: BaseObject This object represents a general file (as opposed to photos, voice messages and audio files). Parameters: Name Type Description Default file_id str) Identifier for this file, which can be used to download or reuse the file None file_unique_id str) Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None thumb obj) Optional. Document thumbnail as defined by sender required file_name str) Optional. Original filename as defined by sender required mime_type str) Optional. MIME type of the file as defined by sender required file_size int) Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. required","title":"Document"},{"location":"reference/objects/gen/file/","text":"File Bases: BaseObject This object represents a file ready to be downloaded. Parameters: Name Type Description Default file_id str Unique identifier for this file None file_unique_id str Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None file_size int Optional. File size, if known required file_path str Optional. File path. Use https://api.telegram.org/file/bot / to get the file. required","title":"file"},{"location":"reference/objects/gen/file/#autotelegram.telegram.objects.file.File","text":"Bases: BaseObject This object represents a file ready to be downloaded. Parameters: Name Type Description Default file_id str Unique identifier for this file None file_unique_id str Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None file_size int Optional. File size, if known required file_path str Optional. File path. Use https://api.telegram.org/file/bot / to get the file. required","title":"File"},{"location":"reference/objects/gen/forcereply/","text":"ForceReply Bases: BaseObject Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode. Parameters: Name Type Description Default force_reply obj: bool ): Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply' None selective obj: bool ): Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) required input_field_placeholder obj: str ): Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters required","title":"forcereply"},{"location":"reference/objects/gen/forcereply/#autotelegram.telegram.objects.forcereply.ForceReply","text":"Bases: BaseObject Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode. Parameters: Name Type Description Default force_reply obj: bool ): Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply' None selective obj: bool ): Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) required input_field_placeholder obj: str ): Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters required","title":"ForceReply"},{"location":"reference/objects/gen/forumtopic/","text":"ForumTopic Bases: BaseObject __init__ ( message_thread_id = None , name = None , icon_color = None ) This object represents a forum topic. Parameters: Name Type Description Default message_thread_id int Unique identifier of the forum topic None name str Name of the topic None icon_color int Color of the topic icon in RGB format None icon_custom_emoji_id str , Optional Unique identifier of the custom emoji shown as the topic icon required ForumTopicClosed Bases: BaseObject This object represents a service message about a forum topic closed in the chat. Currently holds no information. ForumTopicCreated Bases: BaseObject This object represents a service message about a new forum topic created in the chat https://core.telegram.org/bots/api#forumtopiccreated Parameters: Name Type Description Default name str (str) Name of the topic None icon_color int (int) Color of the topic icon in RGB format None icon_custom_emoji_id (str) Optional. Unique identifier of the custom emoji shown as the topic icon required ForumTopicReopened Bases: BaseObject This object represents a service message about a forum topic reopened in the chat. Currently holds no information.","title":"forumtopic"},{"location":"reference/objects/gen/forumtopic/#autotelegram.telegram.objects.forumtopic.ForumTopic","text":"Bases: BaseObject","title":"ForumTopic"},{"location":"reference/objects/gen/forumtopic/#autotelegram.telegram.objects.forumtopic.ForumTopic.__init__","text":"This object represents a forum topic. Parameters: Name Type Description Default message_thread_id int Unique identifier of the forum topic None name str Name of the topic None icon_color int Color of the topic icon in RGB format None icon_custom_emoji_id str , Optional Unique identifier of the custom emoji shown as the topic icon required","title":"__init__()"},{"location":"reference/objects/gen/forumtopic/#autotelegram.telegram.objects.forumtopic.ForumTopicClosed","text":"Bases: BaseObject This object represents a service message about a forum topic closed in the chat. Currently holds no information.","title":"ForumTopicClosed"},{"location":"reference/objects/gen/forumtopic/#autotelegram.telegram.objects.forumtopic.ForumTopicCreated","text":"Bases: BaseObject This object represents a service message about a new forum topic created in the chat https://core.telegram.org/bots/api#forumtopiccreated Parameters: Name Type Description Default name str (str) Name of the topic None icon_color int (int) Color of the topic icon in RGB format None icon_custom_emoji_id (str) Optional. Unique identifier of the custom emoji shown as the topic icon required","title":"ForumTopicCreated"},{"location":"reference/objects/gen/forumtopic/#autotelegram.telegram.objects.forumtopic.ForumTopicReopened","text":"Bases: BaseObject This object represents a service message about a forum topic reopened in the chat. Currently holds no information.","title":"ForumTopicReopened"},{"location":"reference/objects/gen/inlinekeyboard/","text":"CallbackGame Bases: BaseObject A placeholder, currently holds no information. Use BotFather to set up your game. InlineKeyboardButton Bases: BaseObject \" This object represents one button of an inline keyboard. You must use exactly one of the optional fields. Parameters: Name Type Description Default text str) Label text on the button None url (str) Optional. HTTP or tg:// URL to be opened when the button is pressed. required Links tg //user?id= can be used to mention a user by their ID without using a username, required callback_data str) Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes required web_app obj: WebAppInfo ) : Optional. Description of the Web App that will be launched when the user presses the button. required login_url obj: LoginUrl ) : Optional. An HTTPS URL used to automatically authorize the user. required switch_inline_query str) Optional. If set, pressing the button will prompt the user to select one of their chats, required switch_inline_query_current_chat str) Optional. If set, pressing the button will insert the bot's username and the specified inline query required callback_game obj: CallbackGame ) : Optional. Description of the game that will be launched when the user presses the button. Note: This type of button must always be the first button in the first row. required pay bool) Optional. Specify True, to send a Pay button. Note: This type of button must always be the first button in the first row and can only be used in invoice messages. required InlineKeyboardMarkup Bases: BaseObject \" This object represents an inline keyboard that appears right next to the message it belongs to. Parameters: Name Type Description Default keyboard_type str The type of keyboard to create. The value can either be \"stack\" 'stack' cols int The number of columns to create if keyboard_type is \"grid\". Defaults to 2 2 inline_keyboard list[ obj: InlineKeyboardButton ]) : Array of button rows, each represented by an Array of InlineKeyboardButton objects None Examples: from autotelegram.telegram.objects import InlineKeyboardMarkup keyboard = InlineKeyboardMarkup () keyboard . add_button ( \"one\" , callback_data = \"1\" ) keyboard . add_button ( \"two\" , callback_data = \"2\" ) keyboard . add_button ( \"three\" , callback_data = \"3\" ) board = keyboard . keyboard () add_button ( text , ** kwargs ) Add InlineKeyboardButton to the keyboard. The buttons will be arranged according to the type of the keyboard set by keyboard_type option. Parameters: Name Type Description Default text The text to place on the InlineKeyboardButton required **kwargs One of the options that are documented in InlineKeyboardButton class {} keyboard () returns a rendered keyboard to be used in the reply_markup argument of message methods. Keyboard Bases: list GridRow Bases: list class representing a row in the InlineKeyboard","title":"inlinekeyboard"},{"location":"reference/objects/gen/inlinekeyboard/#autotelegram.telegram.objects.inlinekeyboard.CallbackGame","text":"Bases: BaseObject A placeholder, currently holds no information. Use BotFather to set up your game.","title":"CallbackGame"},{"location":"reference/objects/gen/inlinekeyboard/#autotelegram.telegram.objects.inlinekeyboard.InlineKeyboardButton","text":"Bases: BaseObject \" This object represents one button of an inline keyboard. You must use exactly one of the optional fields. Parameters: Name Type Description Default text str) Label text on the button None url (str) Optional. HTTP or tg:// URL to be opened when the button is pressed. required Links tg //user?id= can be used to mention a user by their ID without using a username, required callback_data str) Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes required web_app obj: WebAppInfo ) : Optional. Description of the Web App that will be launched when the user presses the button. required login_url obj: LoginUrl ) : Optional. An HTTPS URL used to automatically authorize the user. required switch_inline_query str) Optional. If set, pressing the button will prompt the user to select one of their chats, required switch_inline_query_current_chat str) Optional. If set, pressing the button will insert the bot's username and the specified inline query required callback_game obj: CallbackGame ) : Optional. Description of the game that will be launched when the user presses the button. Note: This type of button must always be the first button in the first row. required pay bool) Optional. Specify True, to send a Pay button. Note: This type of button must always be the first button in the first row and can only be used in invoice messages. required","title":"InlineKeyboardButton"},{"location":"reference/objects/gen/inlinekeyboard/#autotelegram.telegram.objects.inlinekeyboard.InlineKeyboardMarkup","text":"Bases: BaseObject \" This object represents an inline keyboard that appears right next to the message it belongs to. Parameters: Name Type Description Default keyboard_type str The type of keyboard to create. The value can either be \"stack\" 'stack' cols int The number of columns to create if keyboard_type is \"grid\". Defaults to 2 2 inline_keyboard list[ obj: InlineKeyboardButton ]) : Array of button rows, each represented by an Array of InlineKeyboardButton objects None Examples: from autotelegram.telegram.objects import InlineKeyboardMarkup keyboard = InlineKeyboardMarkup () keyboard . add_button ( \"one\" , callback_data = \"1\" ) keyboard . add_button ( \"two\" , callback_data = \"2\" ) keyboard . add_button ( \"three\" , callback_data = \"3\" ) board = keyboard . keyboard ()","title":"InlineKeyboardMarkup"},{"location":"reference/objects/gen/inlinekeyboard/#autotelegram.telegram.objects.inlinekeyboard.InlineKeyboardMarkup.add_button","text":"Add InlineKeyboardButton to the keyboard. The buttons will be arranged according to the type of the keyboard set by keyboard_type option. Parameters: Name Type Description Default text The text to place on the InlineKeyboardButton required **kwargs One of the options that are documented in InlineKeyboardButton class {}","title":"add_button()"},{"location":"reference/objects/gen/inlinekeyboard/#autotelegram.telegram.objects.inlinekeyboard.InlineKeyboardMarkup.keyboard","text":"returns a rendered keyboard to be used in the reply_markup argument of message methods.","title":"keyboard()"},{"location":"reference/objects/gen/inlinekeyboard/#autotelegram.telegram.objects.inlinekeyboard.Keyboard","text":"Bases: list","title":"Keyboard"},{"location":"reference/objects/gen/inlinekeyboard/#autotelegram.telegram.objects.inlinekeyboard.Keyboard.GridRow","text":"Bases: list class representing a row in the InlineKeyboard","title":"GridRow"},{"location":"reference/objects/gen/inputfile/","text":"InputFile Bases: BaseObject This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. InputMedia Bases: BaseObject This object represents the content of a media message to be sent. Parameters: Name Type Description Default type str Type of the result, must be photo None media str File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach:// \" to upload a new one using multipart/form-data under name. None caption str Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing required parse_mode str Optional. Mode for parsing entities in the photo caption. See formatting options for more details. required caption_entities List[ obj: MessageEntity ]): Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode required InputMediaAnimation Bases: BaseObject Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent. Parameters: Name Type Description Default type str_ Type of the result, must be animation. None media str File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \u201cattach:// \u201d to upload a new one using multipart/form-data under name. None thumb str Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \u201cattach:// \u201d if the thumbnail was uploaded using multipart/form-data under required caption str Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing required parse_mode str Optional. Mode for parsing entities in the animation caption. required caption_entities list Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode required width int Optional. Animation width required height int Optional. Animation height required duration int Optional . Animation duration in seconds required InputMediaAudio Bases: BaseObject Represents an audio file to be treated as music to be sent. Parameters: Name Type Description Default type str_ Type of the result, must be audio. None media str File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \u201cattach:// \u201d to upload a new one using multipart/form-data under name. None thumb str Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \u201cattach:// \u201d if the thumbnail was uploaded using multipart/form-data under required caption str Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing required parse_mode str Optional. Mode for parsing entities in the audio caption required caption_entities list Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode required duration int Optional. Duration of the audio in seconds required performer str Optional. Performer of the audio required title str Optional. Title of the audio required InputMediaDocument Bases: BaseObject Represents a general file to be sent. Parameters: Name Type Description Default type str Type of the result, must be document. None media str File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \u201cattach:// \u201d to upload a new one using multipart/form-data under name None thumb str Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \u201cattach:// \u201d if the thumbnail was uploaded using multipart/form-data under . required caption str Optional. Caption of the document to be sent, 0-1024 characters after entities parsing required parse_mode str Optional. Mode for parsing entities in the document caption. required caption_entities list Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode required disable_content_type_detection boolean Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always True, if the document is sent as part of an album. required InputMediaPhoto Bases: BaseObject Represents a photo to be sent. Parameters: Name Type Description Default type str Type of the result, must be photo None media str File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \u201cattach:// \u201d to upload a new one using multipart/form-data under name. None caption str Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing required parse_mode (str Optional. Mode for parsing entities in the photo caption required caption_entities list Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode required InputMediaVideo Bases: BaseObject Represents a video to be sent. Parameters: Name Type Description Default type str_ Type of the result, must be video. None media str File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \u201cattach:// \u201d to upload a new one using multipart/form-data under name. None thumb str Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \u201cattach:// \u201d if the thumbnail was uploaded using multipart/form-data under required caption str Optional. Caption of the video to be sent, 0-1024 characters after entities parsing required parse_mode str Optional. Mode for parsing entities in the video caption. required caption_entities list Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode required width int Optional. Video width required height int Optional. Video height required duration int Optional . Video duration in seconds required supporting_streaming bool Optional. Pass True if the uploaded video is suitable for streaming required","title":"inputfile"},{"location":"reference/objects/gen/inputfile/#autotelegram.telegram.objects.inputfile.InputFile","text":"Bases: BaseObject This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.","title":"InputFile"},{"location":"reference/objects/gen/inputfile/#autotelegram.telegram.objects.inputfile.InputMedia","text":"Bases: BaseObject This object represents the content of a media message to be sent. Parameters: Name Type Description Default type str Type of the result, must be photo None media str File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach:// \" to upload a new one using multipart/form-data under name. None caption str Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing required parse_mode str Optional. Mode for parsing entities in the photo caption. See formatting options for more details. required caption_entities List[ obj: MessageEntity ]): Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode required","title":"InputMedia"},{"location":"reference/objects/gen/inputfile/#autotelegram.telegram.objects.inputfile.InputMediaAnimation","text":"Bases: BaseObject Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent. Parameters: Name Type Description Default type str_ Type of the result, must be animation. None media str File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \u201cattach:// \u201d to upload a new one using multipart/form-data under name. None thumb str Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \u201cattach:// \u201d if the thumbnail was uploaded using multipart/form-data under required caption str Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing required parse_mode str Optional. Mode for parsing entities in the animation caption. required caption_entities list Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode required width int Optional. Animation width required height int Optional. Animation height required duration int Optional . Animation duration in seconds required","title":"InputMediaAnimation"},{"location":"reference/objects/gen/inputfile/#autotelegram.telegram.objects.inputfile.InputMediaAudio","text":"Bases: BaseObject Represents an audio file to be treated as music to be sent. Parameters: Name Type Description Default type str_ Type of the result, must be audio. None media str File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \u201cattach:// \u201d to upload a new one using multipart/form-data under name. None thumb str Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \u201cattach:// \u201d if the thumbnail was uploaded using multipart/form-data under required caption str Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing required parse_mode str Optional. Mode for parsing entities in the audio caption required caption_entities list Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode required duration int Optional. Duration of the audio in seconds required performer str Optional. Performer of the audio required title str Optional. Title of the audio required","title":"InputMediaAudio"},{"location":"reference/objects/gen/inputfile/#autotelegram.telegram.objects.inputfile.InputMediaDocument","text":"Bases: BaseObject Represents a general file to be sent. Parameters: Name Type Description Default type str Type of the result, must be document. None media str File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \u201cattach:// \u201d to upload a new one using multipart/form-data under name None thumb str Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \u201cattach:// \u201d if the thumbnail was uploaded using multipart/form-data under . required caption str Optional. Caption of the document to be sent, 0-1024 characters after entities parsing required parse_mode str Optional. Mode for parsing entities in the document caption. required caption_entities list Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode required disable_content_type_detection boolean Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always True, if the document is sent as part of an album. required","title":"InputMediaDocument"},{"location":"reference/objects/gen/inputfile/#autotelegram.telegram.objects.inputfile.InputMediaPhoto","text":"Bases: BaseObject Represents a photo to be sent. Parameters: Name Type Description Default type str Type of the result, must be photo None media str File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \u201cattach:// \u201d to upload a new one using multipart/form-data under name. None caption str Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing required parse_mode (str Optional. Mode for parsing entities in the photo caption required caption_entities list Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode required","title":"InputMediaPhoto"},{"location":"reference/objects/gen/inputfile/#autotelegram.telegram.objects.inputfile.InputMediaVideo","text":"Bases: BaseObject Represents a video to be sent. Parameters: Name Type Description Default type str_ Type of the result, must be video. None media str File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \u201cattach:// \u201d to upload a new one using multipart/form-data under name. None thumb str Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \u201cattach:// \u201d if the thumbnail was uploaded using multipart/form-data under required caption str Optional. Caption of the video to be sent, 0-1024 characters after entities parsing required parse_mode str Optional. Mode for parsing entities in the video caption. required caption_entities list Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode required width int Optional. Video width required height int Optional. Video height required duration int Optional . Video duration in seconds required supporting_streaming bool Optional. Pass True if the uploaded video is suitable for streaming required","title":"InputMediaVideo"},{"location":"reference/objects/gen/keyboardbutton/","text":"KeyboardButton Bases: BaseObject This object represents one button of the reply keyboard. For simple text buttons String can be used instead of this object to specify text of the button. Optional fields web_app , request_contact , request_location , and request_poll are mutually exclusive. Parameters: Name Type Description Default text str Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed None type str Type of the button. Must be one of: text, request_contact, request_location, request_poll, web_app None request_contact bool Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only required request_location bool Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only required request_poll str Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only required web_app str Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only required KeyboardButtonPollType Bases: BaseObject This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed. Parameters: Name Type Description Default type str Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type. None","title":"keyboardbutton"},{"location":"reference/objects/gen/keyboardbutton/#autotelegram.telegram.objects.keyboardbutton.KeyboardButton","text":"Bases: BaseObject This object represents one button of the reply keyboard. For simple text buttons String can be used instead of this object to specify text of the button. Optional fields web_app , request_contact , request_location , and request_poll are mutually exclusive. Parameters: Name Type Description Default text str Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed None type str Type of the button. Must be one of: text, request_contact, request_location, request_poll, web_app None request_contact bool Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only required request_location bool Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only required request_poll str Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only required web_app str Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only required","title":"KeyboardButton"},{"location":"reference/objects/gen/keyboardbutton/#autotelegram.telegram.objects.keyboardbutton.KeyboardButtonPollType","text":"Bases: BaseObject This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed. Parameters: Name Type Description Default type str Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type. None","title":"KeyboardButtonPollType"},{"location":"reference/objects/gen/location/","text":"Location Bases: BaseObject This object represents a point on the map. Parameters: Name Type Description Default longitude float Longitude as defined by sender None latitude float Latitude as defined by sender None","title":"location"},{"location":"reference/objects/gen/location/#autotelegram.telegram.objects.location.Location","text":"Bases: BaseObject This object represents a point on the map. Parameters: Name Type Description Default longitude float Longitude as defined by sender None latitude float Latitude as defined by sender None","title":"Location"},{"location":"reference/objects/gen/loginurl/","text":"LoginUrl Bases: BaseObject This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in: Telegram apps support these buttons as of version 5.7. Parameters: Name Type Description Default url str An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data. None forward_text str Optional. New text of the button in forwarded messages. required bot_username str Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details. required request_write_access bool Optional. Pass True to request the permission for your bot to send messages to the user. required","title":"loginurl"},{"location":"reference/objects/gen/loginurl/#autotelegram.telegram.objects.loginurl.LoginUrl","text":"Bases: BaseObject This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in: Telegram apps support these buttons as of version 5.7. Parameters: Name Type Description Default url str An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data. None forward_text str Optional. New text of the button in forwarded messages. required bot_username str Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details. required request_write_access bool Optional. Pass True to request the permission for your bot to send messages to the user. required","title":"LoginUrl"},{"location":"reference/objects/gen/menubutton/","text":"MenuButton Bases: BaseObject This object describes the bot's menu button in a private chat. It should be one of MenuButtonCommands MenuButtonWebApp MenuButtonDefault If a menu button other than MenuButtonDefault is set for a private chat, then it is applied in the chat. Otherwise the default menu button is applied. By default, the menu button opens the list of bot commands. MenuButtonCommands Bases: BaseObject Represents a menu button, which opens the bot's list of commands. Args: type (str) : Type of the button, must be commands MenuButtonDefault Bases: BaseObject Describes that no specific value for the menu button was set. Parameters: Name Type Description Default type str) Type of the button, must be default None MenuButtonWebApp Bases: BaseObject Represents a menu button, which launches a Web App. Args: type (str) : Type of the button, must be web_app text (str) : Text on the button web_app (:obj : WebAppInfo ) : Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery.","title":"menubutton"},{"location":"reference/objects/gen/menubutton/#autotelegram.telegram.objects.menubutton.MenuButton","text":"Bases: BaseObject This object describes the bot's menu button in a private chat. It should be one of MenuButtonCommands MenuButtonWebApp MenuButtonDefault If a menu button other than MenuButtonDefault is set for a private chat, then it is applied in the chat. Otherwise the default menu button is applied. By default, the menu button opens the list of bot commands.","title":"MenuButton"},{"location":"reference/objects/gen/menubutton/#autotelegram.telegram.objects.menubutton.MenuButtonCommands","text":"Bases: BaseObject Represents a menu button, which opens the bot's list of commands. Args: type (str) : Type of the button, must be commands","title":"MenuButtonCommands"},{"location":"reference/objects/gen/menubutton/#autotelegram.telegram.objects.menubutton.MenuButtonDefault","text":"Bases: BaseObject Describes that no specific value for the menu button was set. Parameters: Name Type Description Default type str) Type of the button, must be default None","title":"MenuButtonDefault"},{"location":"reference/objects/gen/menubutton/#autotelegram.telegram.objects.menubutton.MenuButtonWebApp","text":"Bases: BaseObject Represents a menu button, which launches a Web App. Args: type (str) : Type of the button, must be web_app text (str) : Text on the button web_app (:obj : WebAppInfo ) : Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery.","title":"MenuButtonWebApp"},{"location":"reference/objects/gen/message/","text":"Message Bases: BaseObject This object represents a message. Parameters: Name Type Description Default message_id int Unique message identifier inside this chat None from_user class: telegram.User ): Optional. Sender, can be empty for messages sent to channels required date class: datetime.datetime ): Date the message was sent in Unix time required chat class: telegram.Chat ): Conversation the message belongs to required forward_from class: telegram.User ): Optional. For forwarded messages, sender of the original message required forward_from_chat class: telegram.Chat ): Optional. For messages forwarded from a channel, information about the original channel required forward_from_message_id int Optional. For messages forwarded from channels, identifier of the original message in the channel required forward_signature str Optional. For messages forwarded from channels, signature of the post author if present required forward_sender_name str Optional. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages required forward_date class: datetime.datetime ): Optional. For forwarded messages, date the original message was sent in Unix time required reply_to_message class: telegram.Message ): Optional. For replies, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply. required via_bot class: telegram.User ): Optional. Bot through which the message was sent required edit_date class: datetime.datetime ): Optional. Date the message was last edited in Unix time required media_group_id str Optional. The unique identifier of a media message group this message belongs to required author_signature str Optional. Signature of the post author for messages in channels required text str Optional. For text messages, the actual UTF-8 text of the message, 0-4096 characters. required entities List[ class: telegram.MessageEntity ]): Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text required caption_entities List[ class: telegram.MessageEntity ]): Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption required audio class: telegram.Audio ): Optional. Message is an audio file, information about the file required document class: telegram.Document ): Optional. Message is a general file, information about the file required animation class: telegram.Animation ): Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set required game class: telegram.Game ): Optional. Message is a game, information about the game. More about games \u00bb required photo List[ class: telegram.PhotoSize ]): Optional. Message is a photo, available sizes of the photo required sticker class: telegram.Sticker ): Optional. Message is a sticker, information about the sticker required video class: telegram.Video ): Optional. Message is a video, information about the video required voice class: telegram.Voice ): Optional. Message is a voice message, information about the file required video_note class: telegram.VideoNote ): Optional. Message is a video note, information about the video message required caption str Optional. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters required contact class: telegram.Contact ): Optional. Message is a shared contact, information about the contact required location class: telegram.Location ): Optional. Message is a shared location, information about the location required venue class: telegram.Venue ): Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set required poll class: telegram.Poll ): Optional. Message is a native poll, information about the poll required dice class: telegram.Dice ): Optional. Message is a dice with random value from 1 to 6 required new_chat_members List[ class: telegram.User ]): Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members) required left_chat_member class: telegram.User ): Optional. A member was removed from the group, information about them (this member may be the bot itself) required new_chat_title str Optional. A chat title was changed to this value required new_chat_photo List[ class: telegram.PhotoSize ]): Optional. A chat photo was change to this value required delete_chat_photo bool Optional. Service message: the chat photo was deleted required group_chat_created bool Optional. Service message: the group has been created required supergroup_chat_created bool Optional .Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup. required channel_chat_created bool Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel. required migrate_to_chat_id int Optional. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. required migrate_from_chat_id int Optional. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. required pinned_message class: telegram.Message ): Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it is itself a reply. required invoice class: telegram.Invoice ): Optional. Message is an invoice for a payment, information about the invoice. More about payments \u00bb required successful_payment class: telegram.SuccessfulPayment ): Optional. Message is a service message about a successful payment, information about the payment. More about payments \u00bb required connected_website str Optional. The domain name of the website on which the user has logged in. More about Telegram Login \u00bb required passport_data class: telegram.PassportData ): Optional. Telegram Passport data required proximity_alert_triggered class: telegram.ProximityAlertTriggered ): Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location. required video_chat_scheduled class: telegram.VideoChatScheduled ): Optional. Service message: voice chat scheduled required video_chat_started class: telegram.VideoChatStarted ): Optional. Service message: voice chat started required video_chat_ended class: telegram.VideoChatEnded ): Optional. Service message: voice chat ended required video_chat_participants_invited class: telegram.VideoChatParticipantsInvited ): Optional. Service message: new participants invited to a voice chat required reply_markup class: telegram.InlineKeyboardMarkup ): Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons. required delete_message () async Delete this message replace_with_text ( new_text , ** kwargs ) async Replace the previous text with new text. This method calls edit_message_text under the hood, so you can pass in arguments that are accepted by it. Parameters: Name Type Description Default new_text str the new text to replace old text with required **kwargs these are keyword arguments passed to the underlying send_message method {} reply_with_text ( text , ** kwargs ) async Reply to a message that was send to the bot. This is different from the respond_with_text method in that it will reply directly to the message sent. Parameters: Name Type Description Default text str The text message to reply with required **kwargs These are the same kwargs passed to the send_message method. {} respond_with_text ( text , ** kwargs ) async Respond to a certain message in chat with a text message. This is different from the reply_with_text method in that it will just send a message to the chat without replying. Parameters: Name Type Description Default text str The text message to respond with. required **kwargs These are the same kwargs passed to the send_message method {} MessageAutoDeleteTimerChanged Bases: BaseObject This object represents a service message about a change in auto-delete timer settings. Parameters: Name Type Description Default message class: telegram.Message ): The message with the change. None message_auto_delete_time class: telegram.MessageAutoDeleteTimerChanged ): New auto-delete time for messages in the chat. None Attributes: Name Type Description message class: telegram.Message ): The message with the change. message_auto_delete_time class: telegram.MessageAutoDeleteTimerChanged ): New auto-delete time for messages in the chat. MessageEntity Bases: BaseObject This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. Parameters: Name Type Description Default type str Type of the entity. Can be mention (@username), hashtag, cashtag, bot_command, None offset int Offset in UTF-16 code units to the start of the entity None length int Length of the entity in UTF-16 code units None url str Optional. For \u201ctext_link\u201d only, url that will be opened after user taps on the text required user class: telegram.User ): Optional. For \u201ctext_mention\u201d only, the mentioned user required language str Optional. For \u201cpre\u201d only, the programming language of the entity text required custom_emoji_id str Optional. For \u201ccustom_emoji\u201d only, the custom emoji id required MessageId Bases: BaseObject This object represents a unique message identifier. Parameters: Name Type Description Default message_id int Unique message identifier None","title":"message"},{"location":"reference/objects/gen/message/#autotelegram.telegram.objects.message.Message","text":"Bases: BaseObject This object represents a message. Parameters: Name Type Description Default message_id int Unique message identifier inside this chat None from_user class: telegram.User ): Optional. Sender, can be empty for messages sent to channels required date class: datetime.datetime ): Date the message was sent in Unix time required chat class: telegram.Chat ): Conversation the message belongs to required forward_from class: telegram.User ): Optional. For forwarded messages, sender of the original message required forward_from_chat class: telegram.Chat ): Optional. For messages forwarded from a channel, information about the original channel required forward_from_message_id int Optional. For messages forwarded from channels, identifier of the original message in the channel required forward_signature str Optional. For messages forwarded from channels, signature of the post author if present required forward_sender_name str Optional. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages required forward_date class: datetime.datetime ): Optional. For forwarded messages, date the original message was sent in Unix time required reply_to_message class: telegram.Message ): Optional. For replies, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply. required via_bot class: telegram.User ): Optional. Bot through which the message was sent required edit_date class: datetime.datetime ): Optional. Date the message was last edited in Unix time required media_group_id str Optional. The unique identifier of a media message group this message belongs to required author_signature str Optional. Signature of the post author for messages in channels required text str Optional. For text messages, the actual UTF-8 text of the message, 0-4096 characters. required entities List[ class: telegram.MessageEntity ]): Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text required caption_entities List[ class: telegram.MessageEntity ]): Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption required audio class: telegram.Audio ): Optional. Message is an audio file, information about the file required document class: telegram.Document ): Optional. Message is a general file, information about the file required animation class: telegram.Animation ): Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set required game class: telegram.Game ): Optional. Message is a game, information about the game. More about games \u00bb required photo List[ class: telegram.PhotoSize ]): Optional. Message is a photo, available sizes of the photo required sticker class: telegram.Sticker ): Optional. Message is a sticker, information about the sticker required video class: telegram.Video ): Optional. Message is a video, information about the video required voice class: telegram.Voice ): Optional. Message is a voice message, information about the file required video_note class: telegram.VideoNote ): Optional. Message is a video note, information about the video message required caption str Optional. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters required contact class: telegram.Contact ): Optional. Message is a shared contact, information about the contact required location class: telegram.Location ): Optional. Message is a shared location, information about the location required venue class: telegram.Venue ): Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set required poll class: telegram.Poll ): Optional. Message is a native poll, information about the poll required dice class: telegram.Dice ): Optional. Message is a dice with random value from 1 to 6 required new_chat_members List[ class: telegram.User ]): Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members) required left_chat_member class: telegram.User ): Optional. A member was removed from the group, information about them (this member may be the bot itself) required new_chat_title str Optional. A chat title was changed to this value required new_chat_photo List[ class: telegram.PhotoSize ]): Optional. A chat photo was change to this value required delete_chat_photo bool Optional. Service message: the chat photo was deleted required group_chat_created bool Optional. Service message: the group has been created required supergroup_chat_created bool Optional .Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup. required channel_chat_created bool Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel. required migrate_to_chat_id int Optional. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. required migrate_from_chat_id int Optional. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. required pinned_message class: telegram.Message ): Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it is itself a reply. required invoice class: telegram.Invoice ): Optional. Message is an invoice for a payment, information about the invoice. More about payments \u00bb required successful_payment class: telegram.SuccessfulPayment ): Optional. Message is a service message about a successful payment, information about the payment. More about payments \u00bb required connected_website str Optional. The domain name of the website on which the user has logged in. More about Telegram Login \u00bb required passport_data class: telegram.PassportData ): Optional. Telegram Passport data required proximity_alert_triggered class: telegram.ProximityAlertTriggered ): Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location. required video_chat_scheduled class: telegram.VideoChatScheduled ): Optional. Service message: voice chat scheduled required video_chat_started class: telegram.VideoChatStarted ): Optional. Service message: voice chat started required video_chat_ended class: telegram.VideoChatEnded ): Optional. Service message: voice chat ended required video_chat_participants_invited class: telegram.VideoChatParticipantsInvited ): Optional. Service message: new participants invited to a voice chat required reply_markup class: telegram.InlineKeyboardMarkup ): Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons. required","title":"Message"},{"location":"reference/objects/gen/message/#autotelegram.telegram.objects.message.Message.delete_message","text":"Delete this message","title":"delete_message()"},{"location":"reference/objects/gen/message/#autotelegram.telegram.objects.message.Message.replace_with_text","text":"Replace the previous text with new text. This method calls edit_message_text under the hood, so you can pass in arguments that are accepted by it. Parameters: Name Type Description Default new_text str the new text to replace old text with required **kwargs these are keyword arguments passed to the underlying send_message method {}","title":"replace_with_text()"},{"location":"reference/objects/gen/message/#autotelegram.telegram.objects.message.Message.reply_with_text","text":"Reply to a message that was send to the bot. This is different from the respond_with_text method in that it will reply directly to the message sent. Parameters: Name Type Description Default text str The text message to reply with required **kwargs These are the same kwargs passed to the send_message method. {}","title":"reply_with_text()"},{"location":"reference/objects/gen/message/#autotelegram.telegram.objects.message.Message.respond_with_text","text":"Respond to a certain message in chat with a text message. This is different from the reply_with_text method in that it will just send a message to the chat without replying. Parameters: Name Type Description Default text str The text message to respond with. required **kwargs These are the same kwargs passed to the send_message method {}","title":"respond_with_text()"},{"location":"reference/objects/gen/message/#autotelegram.telegram.objects.message.MessageAutoDeleteTimerChanged","text":"Bases: BaseObject This object represents a service message about a change in auto-delete timer settings. Parameters: Name Type Description Default message class: telegram.Message ): The message with the change. None message_auto_delete_time class: telegram.MessageAutoDeleteTimerChanged ): New auto-delete time for messages in the chat. None Attributes: Name Type Description message class: telegram.Message ): The message with the change. message_auto_delete_time class: telegram.MessageAutoDeleteTimerChanged ): New auto-delete time for messages in the chat.","title":"MessageAutoDeleteTimerChanged"},{"location":"reference/objects/gen/message/#autotelegram.telegram.objects.message.MessageEntity","text":"Bases: BaseObject This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. Parameters: Name Type Description Default type str Type of the entity. Can be mention (@username), hashtag, cashtag, bot_command, None offset int Offset in UTF-16 code units to the start of the entity None length int Length of the entity in UTF-16 code units None url str Optional. For \u201ctext_link\u201d only, url that will be opened after user taps on the text required user class: telegram.User ): Optional. For \u201ctext_mention\u201d only, the mentioned user required language str Optional. For \u201cpre\u201d only, the programming language of the entity text required custom_emoji_id str Optional. For \u201ccustom_emoji\u201d only, the custom emoji id required","title":"MessageEntity"},{"location":"reference/objects/gen/message/#autotelegram.telegram.objects.message.MessageId","text":"Bases: BaseObject This object represents a unique message identifier. Parameters: Name Type Description Default message_id int Unique message identifier None","title":"MessageId"},{"location":"reference/objects/gen/photosize/","text":"PhotoSize Bases: BaseObject This object represents one size of a photo or a file / sticker thumbnail. Parameters: Name Type Description Default file_id str) Identifier for this file, which can be used to download or reuse the file None file_unique_id str) Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None width int) Video width None height int) Video height None file_size int) Optional. File size in bytes required","title":"photosize"},{"location":"reference/objects/gen/photosize/#autotelegram.telegram.objects.photosize.PhotoSize","text":"Bases: BaseObject This object represents one size of a photo or a file / sticker thumbnail. Parameters: Name Type Description Default file_id str) Identifier for this file, which can be used to download or reuse the file None file_unique_id str) Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None width int) Video width None height int) Video height None file_size int) Optional. File size in bytes required","title":"PhotoSize"},{"location":"reference/objects/gen/poll/","text":"Poll Bases: BaseObject This Object represents a poll Parameters: Name Type Description Default id str Unique poll identifier None question str Poll question, 1-255 characters None options list[ class: telegram.PollOption ]): list of poll options None total_voter_count int Total number of users that voted in the poll None is_closed bool True, if the poll is closed None is_anonymous bool True, if the poll is anonymous None type str Poll type, currently can be \u201cregular\u201d or \u201cquiz\u201d None allows_multiple_answers bool True, if the poll allows multiple answers None correct_option_id int Optional. 0-based identifier of the correct answer option. required explanation str Optional. Text that is shown when a user chooses an required explanation_entities list[ class: telegram.MessageEntity ]): Optional. required open_period int Optional. Amount of time in seconds the poll will be active after creation required close_date int Optional. Point in time (Unix timestamp) when the poll will be automatically closed required PollAnswer Bases: BaseObject This object represents an answer of a user in a non-anonymous poll. Parameters: Name Type Description Default poll_id str Unique poll identifier None user class: telegram.User ): The user, who changed the answer to the poll None option_ids list [ int ] 0-based identifiers of answer options, chosen by the user. None PollOption Bases: BaseObject This object contains information about one answer option in a poll. Parameters: Name Type Description Default text str Option text, 1-100 characters None voter_count int Number of users that voted for this option None","title":"poll"},{"location":"reference/objects/gen/poll/#autotelegram.telegram.objects.poll.Poll","text":"Bases: BaseObject This Object represents a poll Parameters: Name Type Description Default id str Unique poll identifier None question str Poll question, 1-255 characters None options list[ class: telegram.PollOption ]): list of poll options None total_voter_count int Total number of users that voted in the poll None is_closed bool True, if the poll is closed None is_anonymous bool True, if the poll is anonymous None type str Poll type, currently can be \u201cregular\u201d or \u201cquiz\u201d None allows_multiple_answers bool True, if the poll allows multiple answers None correct_option_id int Optional. 0-based identifier of the correct answer option. required explanation str Optional. Text that is shown when a user chooses an required explanation_entities list[ class: telegram.MessageEntity ]): Optional. required open_period int Optional. Amount of time in seconds the poll will be active after creation required close_date int Optional. Point in time (Unix timestamp) when the poll will be automatically closed required","title":"Poll"},{"location":"reference/objects/gen/poll/#autotelegram.telegram.objects.poll.PollAnswer","text":"Bases: BaseObject This object represents an answer of a user in a non-anonymous poll. Parameters: Name Type Description Default poll_id str Unique poll identifier None user class: telegram.User ): The user, who changed the answer to the poll None option_ids list [ int ] 0-based identifiers of answer options, chosen by the user. None","title":"PollAnswer"},{"location":"reference/objects/gen/poll/#autotelegram.telegram.objects.poll.PollOption","text":"Bases: BaseObject This object contains information about one answer option in a poll. Parameters: Name Type Description Default text str Option text, 1-100 characters None voter_count int Number of users that voted for this option None","title":"PollOption"},{"location":"reference/objects/gen/proximityalerttriggered/","text":"ProximityAlertTriggered Bases: BaseObject This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user. Parameters: Name Type Description Default traveler telegram . objects . user . User User that triggered the alert None watcher telegram . objects . user . User User that set the alert None distance int The distance between the users None","title":"proximityalerttriggered"},{"location":"reference/objects/gen/proximityalerttriggered/#autotelegram.telegram.objects.proximityalerttriggered.ProximityAlertTriggered","text":"Bases: BaseObject This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user. Parameters: Name Type Description Default traveler telegram . objects . user . User User that triggered the alert None watcher telegram . objects . user . User User that set the alert None distance int The distance between the users None","title":"ProximityAlertTriggered"},{"location":"reference/objects/gen/replykeyboard/","text":"ReplyKeyboardMarkup Bases: BaseObject This object represents a custom keyboard with reply options (see Introduction to bots for details and examples). Parameters: Name Type Description Default keyboard list Array of button rows, each represented by an Array of KeyboardButton objects None resize_keyboard bool Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to False, in which case the custom keyboard is always of the same height as the app's standard keyboard. required one_time_keyboard bool Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat \u2013 the user can press a special button in the input field to see the custom keyboard again. Defaults to False. required selective bool Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message. Example: A user requests to change the bot\u2018s language, bot replies to the request with a keyboard to select the new language. Other users in the group don\u2019t see the keyboard. required ReplyKeyboardRemove Bases: BaseObject Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup). Parameters: Name Type Description Default remove_keyboard bool Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup) None selective bool Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message. Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet. required","title":"replykeyboard"},{"location":"reference/objects/gen/replykeyboard/#autotelegram.telegram.objects.replykeyboard.ReplyKeyboardMarkup","text":"Bases: BaseObject This object represents a custom keyboard with reply options (see Introduction to bots for details and examples). Parameters: Name Type Description Default keyboard list Array of button rows, each represented by an Array of KeyboardButton objects None resize_keyboard bool Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to False, in which case the custom keyboard is always of the same height as the app's standard keyboard. required one_time_keyboard bool Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat \u2013 the user can press a special button in the input field to see the custom keyboard again. Defaults to False. required selective bool Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message. Example: A user requests to change the bot\u2018s language, bot replies to the request with a keyboard to select the new language. Other users in the group don\u2019t see the keyboard. required","title":"ReplyKeyboardMarkup"},{"location":"reference/objects/gen/replykeyboard/#autotelegram.telegram.objects.replykeyboard.ReplyKeyboardRemove","text":"Bases: BaseObject Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup). Parameters: Name Type Description Default remove_keyboard bool Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup) None selective bool Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message. Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet. required","title":"ReplyKeyboardRemove"},{"location":"reference/objects/gen/responseparameters/","text":"ResponseParameters Bases: BaseObject Contains information about why a request was unsuccessful. Parameters: Name Type Description Default migrate_to_chat_id int Optional. The group has been migrated to a supergroup with the specified identifier. required retry_after int Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated required","title":"responseparamaters"},{"location":"reference/objects/gen/responseparameters/#autotelegram.telegram.objects.responseparameters.ResponseParameters","text":"Bases: BaseObject Contains information about why a request was unsuccessful. Parameters: Name Type Description Default migrate_to_chat_id int Optional. The group has been migrated to a supergroup with the specified identifier. required retry_after int Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated required","title":"ResponseParameters"},{"location":"reference/objects/gen/update/","text":"Update Bases: BaseObject This object represents an incoming update. Only one of the optional parameters can be present in any given update. Parameters: Name Type Description Default update_id int The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially. None message Optional [ telegram . objects . message . Message ] Optional. New incoming message of any kind \u2014 text, photo, sticker, etc. required edited_message Optional [ telegram . objects . message . Message ] Optional. New version of a message that is known to the bot and was edited required channel_post Optional [ telegram . objects . message . Message ] Optional. New incoming channel post of any kind \u2014 text, photo, sticker, etc. required edited_channel_post Optional [ telegram . objects . message . Message ] Optional. New version of a channel post that is known to the bot and was edited required inline_query Optional [ telegram . objects . inline_query . InlineQuery ] Optional. New incoming inline query required chosen_inline_result Optional [ telegram . objects . inline_query . ChosenInlineResult ] Optional. The result of an inline query that was chosen by a user and required callback_query Optional [ telegram . objects . callback_query . CallbackQuery ] Optional. New incoming callback query required shipping_query Optional [ telegram . objects . shipping_query . ShippingQuery ] Optional. New incoming shipping query. Only for invoices with flexible price required pre_checkout_query Optional [ telegram . objects . pre_checkout_query . PreCheckoutQuery ] Optional. New incoming pre-checkout query. Contains full information about checkout required poll Optional [ telegram . objects . poll . Poll ] Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot required poll_answer Optional [ telegram . objects . poll . PollAnswer ] Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. required my_chat_member Optional [ telegram . objects . chat_member_updated . ChatMemberUpdated ] Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. required chat_member Optional [ telegram . objects . chat_member_updated . ChatMemberUpdated ] Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. required chat_join_request Optional [ telegram . objects . chat_join_request . ChatJoinRequest ] Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. required get_object () Use this method to determine which update object has been sent. The return value is a tuple containing name of the object set as a string and the set object itself. Returns: Type Description tuple a tuple of object name and object, such as (\"message\", <autotelegram.telegram.objects.message.Message> )","title":"update"},{"location":"reference/objects/gen/update/#autotelegram.telegram.objects.update.Update","text":"Bases: BaseObject This object represents an incoming update. Only one of the optional parameters can be present in any given update. Parameters: Name Type Description Default update_id int The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially. None message Optional [ telegram . objects . message . Message ] Optional. New incoming message of any kind \u2014 text, photo, sticker, etc. required edited_message Optional [ telegram . objects . message . Message ] Optional. New version of a message that is known to the bot and was edited required channel_post Optional [ telegram . objects . message . Message ] Optional. New incoming channel post of any kind \u2014 text, photo, sticker, etc. required edited_channel_post Optional [ telegram . objects . message . Message ] Optional. New version of a channel post that is known to the bot and was edited required inline_query Optional [ telegram . objects . inline_query . InlineQuery ] Optional. New incoming inline query required chosen_inline_result Optional [ telegram . objects . inline_query . ChosenInlineResult ] Optional. The result of an inline query that was chosen by a user and required callback_query Optional [ telegram . objects . callback_query . CallbackQuery ] Optional. New incoming callback query required shipping_query Optional [ telegram . objects . shipping_query . ShippingQuery ] Optional. New incoming shipping query. Only for invoices with flexible price required pre_checkout_query Optional [ telegram . objects . pre_checkout_query . PreCheckoutQuery ] Optional. New incoming pre-checkout query. Contains full information about checkout required poll Optional [ telegram . objects . poll . Poll ] Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot required poll_answer Optional [ telegram . objects . poll . PollAnswer ] Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. required my_chat_member Optional [ telegram . objects . chat_member_updated . ChatMemberUpdated ] Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. required chat_member Optional [ telegram . objects . chat_member_updated . ChatMemberUpdated ] Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. required chat_join_request Optional [ telegram . objects . chat_join_request . ChatJoinRequest ] Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. required","title":"Update"},{"location":"reference/objects/gen/update/#autotelegram.telegram.objects.update.Update.get_object","text":"Use this method to determine which update object has been sent. The return value is a tuple containing name of the object set as a string and the set object itself. Returns: Type Description tuple a tuple of object name and object, such as (\"message\", <autotelegram.telegram.objects.message.Message> )","title":"get_object()"},{"location":"reference/objects/gen/user/","text":"User Bases: BaseObject This object represents a Telegram user or bot. Parameters: Name Type Description Default id int Unique identifier for this user or bot None is_bot bool True, if this user is a bot None first_name str User's or bot's first name None last_name Optional [ str ] Optional. User's or bot's last name required username Optional [ str ] Optional. User's or bot's username required language_code Optional [ str ] Optional. IETF language tag of the user's language required can_join_groups Optional [ bool ] Optional. True, if the bot can be invited to groups. Returned only in getMe. required can_read_all_group_messages Optional [ bool ] Optional. True, if privacy mode is disabled for the bot. Returned only in getMe. required supports_inline_queries Optional [ bool ] Optional. True, if the bot supports inline queries. Returned only in getMe. required UserProfilePhotos Bases: BaseObject This object represent a user's profile pictures. Parameters: Name Type Description Default total_count int Total number of profile pictures the target user has None photos List [ List [ PhotoSize ]] Requested profile pictures (in up to 4 sizes each) None","title":"user"},{"location":"reference/objects/gen/user/#autotelegram.telegram.objects.user.User","text":"Bases: BaseObject This object represents a Telegram user or bot. Parameters: Name Type Description Default id int Unique identifier for this user or bot None is_bot bool True, if this user is a bot None first_name str User's or bot's first name None last_name Optional [ str ] Optional. User's or bot's last name required username Optional [ str ] Optional. User's or bot's username required language_code Optional [ str ] Optional. IETF language tag of the user's language required can_join_groups Optional [ bool ] Optional. True, if the bot can be invited to groups. Returned only in getMe. required can_read_all_group_messages Optional [ bool ] Optional. True, if privacy mode is disabled for the bot. Returned only in getMe. required supports_inline_queries Optional [ bool ] Optional. True, if the bot supports inline queries. Returned only in getMe. required","title":"User"},{"location":"reference/objects/gen/user/#autotelegram.telegram.objects.user.UserProfilePhotos","text":"Bases: BaseObject This object represent a user's profile pictures. Parameters: Name Type Description Default total_count int Total number of profile pictures the target user has None photos List [ List [ PhotoSize ]] Requested profile pictures (in up to 4 sizes each) None","title":"UserProfilePhotos"},{"location":"reference/objects/gen/venue/","text":"Venue Bases: BaseObject This object represents a venue. Parameters: Name Type Description Default location Location Venue location None title str Name of the venue None address str Address of the venue None foursquare_id Optional [ str ] Optional. Foursquare identifier of the venue required foursquare_type Optional [ str ] Optional. Foursquare type of the venue. required google_place_id Optional [ str ] Optional. Google Places identifier of the venue required google_place_type Optional [ str ] Optional. Google Places type of the venue. (See supported types.) required","title":"venue"},{"location":"reference/objects/gen/venue/#autotelegram.telegram.objects.venue.Venue","text":"Bases: BaseObject This object represents a venue. Parameters: Name Type Description Default location Location Venue location None title str Name of the venue None address str Address of the venue None foursquare_id Optional [ str ] Optional. Foursquare identifier of the venue required foursquare_type Optional [ str ] Optional. Foursquare type of the venue. required google_place_id Optional [ str ] Optional. Google Places identifier of the venue required google_place_type Optional [ str ] Optional. Google Places type of the venue. (See supported types.) required","title":"Venue"},{"location":"reference/objects/gen/video/","text":"Video Bases: BaseObject This object represents a video file. Parameters: Name Type Description Default file_id str Unique identifier for this file None file_unique_id str Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None width int Video width as defined by sender None height int Video height as defined by sender None duration int Duration of the video in seconds as defined by sender None thumb class: telegram.objects.photo_size.PhotoSize ): Optional. Video thumbnail required mime_type str Optional. Mime type of a file as defined by sender required file_size int Optional. File size required VideoChatEnded Bases: BaseObject This object represents a service message about a video chat ended in the chat. Args: duration (int): Video duration in seconds VideoChatParticipantsInvited Bases: BaseObject This object represents a service message about new members invited to a video chat. Parameters: Name Type Description Default users list[ class: telegram.objects.user.User ]): Optional. New members that were invited to the video chat None VideoChatScheduled Bases: BaseObject This object represents a service message about a video chat scheduled in the chat. Args: start_date (:class:`telegram.objects.base.UnixTime`): Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator VideoNote Bases: BaseObject This object represents a video message (available in Telegram apps as of v.4.0). Parameters: Name Type Description Default file_id str Unique identifier for this file None file_unique_id str Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None length int Video width and height (diameter of the video message) as defined by sender None duration int Duration of the video in seconds as defined by sender None thumb class: telegram.objects.photo_size.PhotoSize ): Optional. Video thumbnail required file_size int Optional. File size required","title":"video"},{"location":"reference/objects/gen/video/#autotelegram.telegram.objects.video.Video","text":"Bases: BaseObject This object represents a video file. Parameters: Name Type Description Default file_id str Unique identifier for this file None file_unique_id str Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None width int Video width as defined by sender None height int Video height as defined by sender None duration int Duration of the video in seconds as defined by sender None thumb class: telegram.objects.photo_size.PhotoSize ): Optional. Video thumbnail required mime_type str Optional. Mime type of a file as defined by sender required file_size int Optional. File size required","title":"Video"},{"location":"reference/objects/gen/video/#autotelegram.telegram.objects.video.VideoChatEnded","text":"Bases: BaseObject This object represents a service message about a video chat ended in the chat. Args: duration (int): Video duration in seconds","title":"VideoChatEnded"},{"location":"reference/objects/gen/video/#autotelegram.telegram.objects.video.VideoChatParticipantsInvited","text":"Bases: BaseObject This object represents a service message about new members invited to a video chat. Parameters: Name Type Description Default users list[ class: telegram.objects.user.User ]): Optional. New members that were invited to the video chat None","title":"VideoChatParticipantsInvited"},{"location":"reference/objects/gen/video/#autotelegram.telegram.objects.video.VideoChatScheduled","text":"Bases: BaseObject This object represents a service message about a video chat scheduled in the chat. Args: start_date (:class:`telegram.objects.base.UnixTime`): Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator","title":"VideoChatScheduled"},{"location":"reference/objects/gen/video/#autotelegram.telegram.objects.video.VideoNote","text":"Bases: BaseObject This object represents a video message (available in Telegram apps as of v.4.0). Parameters: Name Type Description Default file_id str Unique identifier for this file None file_unique_id str Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None length int Video width and height (diameter of the video message) as defined by sender None duration int Duration of the video in seconds as defined by sender None thumb class: telegram.objects.photo_size.PhotoSize ): Optional. Video thumbnail required file_size int Optional. File size required","title":"VideoNote"},{"location":"reference/objects/gen/voice/","text":"Voice Bases: BaseObject This object represents a voice note. Parameters: Name Type Description Default file_id str Unique identifier for this file None file_unique_id str Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None duration int Duration of the audio in seconds as defined by sender None mime_type str Optional. MIME type of the file as defined by sender required file_size int Optional. File size required","title":"voice"},{"location":"reference/objects/gen/voice/#autotelegram.telegram.objects.voice.Voice","text":"Bases: BaseObject This object represents a voice note. Parameters: Name Type Description Default file_id str Unique identifier for this file None file_unique_id str Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. None duration int Duration of the audio in seconds as defined by sender None mime_type str Optional. MIME type of the file as defined by sender required file_size int Optional. File size required","title":"Voice"},{"location":"reference/objects/gen/webapp/","text":"","title":"webapp"},{"location":"reference/objects/inline/inline/","text":"","title":"inline"},{"location":"reference/objects/passport/passport/","text":"","title":"passport"},{"location":"reference/objects/payments/payments/","text":"","title":"payments"},{"location":"reference/objects/stickers/stickers/","text":"","title":"stickers"},{"location":"user-guide/how-it-works/","text":"Overview Here's an overview of how autotelegram works. The telegram http based API as provided by telegram is mainly composed of two parts: the telegram objects and the telegram methods . The telegram objects include objects like Message object, Update object, User object, Chat object and many others. They are represented by telegram in JSON form. for example, below is a response of a telegram bot with an update object { \"ok\" : true , \"result\" :[ { \"update_id\" : 184545088 , \"message\" :{ \"message_id\" : 156 , \"from\" :{ \"id\" : 910177620 , \"is_bot\" : false , \"first_name\" : \"TobiasHT \\ud83c\\uddfa\\ud83c\\uddec\" , \"language_code\" : \"en\" }, \"chat\" :{ \"id\" : 910177620 , \"first_name\" : \"TobiasHT \\ud83c\\uddfa\\ud83c\\uddec\" , \"type\" : \"private\" }, \"date\" : 1676294169 , \"text\" : \"Hi\" } } ] } after making a request to get updates, telegram responds with a JSON object with the first element being ok . if ok is true , then our request was sucessful and we receive our updates as a list of result s. If ok is false , then there was something wrong with our request and telegram returns to us an error code and description of the error that occured. You can read more about error handling here . Autotelegram automatically intercepts this error for you and raises it as a python error called TelegramResultError which you can catch in your programs constructing the object tree Working with JSON data in this form is really tedious. It takes a lot of effort to query deeply nested elements and attributes. And if you look at the example response above closely, you can actually see that the result builds out as a tree of telegram objects with update being the root object and the other objects following as children and children of children. Autotelegram takes the initiative to transform this JSON data into a python telegram object tree that you can easily work with in your code. On every response from a telegram bot, autotelegram returns this object tree for you. You can then easily extract the object of your choice and interact with it. For example, working with an Update object would be as easy as: >>> update = bot . get_updates ()[ 0 ] >>> update . message < class ' autotelegram . telegram . objects . message . Message '> >>> msg = _ >>> msg . text \"Hi\" >>> update . update_id 184545088 This is just a crude representation of how you would interact with the update object and the rest of the objects. You can access deeply nested attributes easily, such as; >>> chat_id = update . message . chat . id >>> chat_id 910177620 conclusion Next, let's see how we can actually make requests to the telegram bot and interact with it.","title":"How autotelegram works"},{"location":"user-guide/how-it-works/#overview","text":"Here's an overview of how autotelegram works. The telegram http based API as provided by telegram is mainly composed of two parts: the telegram objects and the telegram methods . The telegram objects include objects like Message object, Update object, User object, Chat object and many others. They are represented by telegram in JSON form. for example, below is a response of a telegram bot with an update object { \"ok\" : true , \"result\" :[ { \"update_id\" : 184545088 , \"message\" :{ \"message_id\" : 156 , \"from\" :{ \"id\" : 910177620 , \"is_bot\" : false , \"first_name\" : \"TobiasHT \\ud83c\\uddfa\\ud83c\\uddec\" , \"language_code\" : \"en\" }, \"chat\" :{ \"id\" : 910177620 , \"first_name\" : \"TobiasHT \\ud83c\\uddfa\\ud83c\\uddec\" , \"type\" : \"private\" }, \"date\" : 1676294169 , \"text\" : \"Hi\" } } ] } after making a request to get updates, telegram responds with a JSON object with the first element being ok . if ok is true , then our request was sucessful and we receive our updates as a list of result s. If ok is false , then there was something wrong with our request and telegram returns to us an error code and description of the error that occured. You can read more about error handling here . Autotelegram automatically intercepts this error for you and raises it as a python error called TelegramResultError which you can catch in your programs","title":"Overview"},{"location":"user-guide/how-it-works/#constructing-the-object-tree","text":"Working with JSON data in this form is really tedious. It takes a lot of effort to query deeply nested elements and attributes. And if you look at the example response above closely, you can actually see that the result builds out as a tree of telegram objects with update being the root object and the other objects following as children and children of children. Autotelegram takes the initiative to transform this JSON data into a python telegram object tree that you can easily work with in your code. On every response from a telegram bot, autotelegram returns this object tree for you. You can then easily extract the object of your choice and interact with it. For example, working with an Update object would be as easy as: >>> update = bot . get_updates ()[ 0 ] >>> update . message < class ' autotelegram . telegram . objects . message . Message '> >>> msg = _ >>> msg . text \"Hi\" >>> update . update_id 184545088 This is just a crude representation of how you would interact with the update object and the rest of the objects. You can access deeply nested attributes easily, such as; >>> chat_id = update . message . chat . id >>> chat_id 910177620","title":"constructing the object tree"},{"location":"user-guide/how-it-works/#conclusion","text":"Next, let's see how we can actually make requests to the telegram bot and interact with it.","title":"conclusion"},{"location":"user-guide/making-requests/","text":"Overview Telegram provides an HTTP based API to interact with the bot. You can send GET or POST requests to the API to pass instructions to the bot and receive back success data if the request was successful or JSON error data if the request was not successful. Getting token Telegram provides a url of the form https://api.telegram.org/bot<TOKEN>/ to interact with your bot. <TOKEN> is your unique token identifying your bot. You can get this token from the botfather telegram bot which is used to create telegram bots. You can follow instruction here to create your bot and get a token. Making requests With a token, we can now manually interact with our bot. Let us test and see. >>> from urllib.request import urlopen >>> from pprint import PrettyPrinter >>> import json >>> token = \"your-telegram-token\" >>> api_url = \"https://api.telegram.org/bot\" >>> bot_api_url = api_url + token >>> >>> pp = PrettyPrinter () >>> with urlopen ( bot_api_url + \"/getMe\" ) as f : ... pp . pprint ( json . loads ( f . read () . decode ())) ... The getMe method returns a User object describing the bot. you'll see a pretty printed result of the request which describes your bot. It will look something like { \"ok\" : true , \"result\" :{ \"id\" : 5083423735 , \"is_bot\" : true , \"first_name\" : \"Sanyu\" , \"username\" : \"OscaKampBot\" , \"can_join_groups\" : true , \"can_read_all_group_messages\" : false , \"supports_inline_queries\" : false }} The context api However, working with a telegram bot this way can be very tedious and time consuming. You'll have to account for network failures, parsing different kinds of results, handling request data such forms and multimedia and so many other things you'll have to build from scratch to have a decently functioning bot. Autotelegram builds a nice async wrapper over the bot api and encapsulates all the telegram methods in a Context object. The Context object now becomes the representation of our telegram bot to us. We can interact with the bot via calling methods on the Context api which will make reliable requests for us under the hood and also manage the network connection, parsing of various data and so on. Here's how we would rewrite the above example with the Context object from autotelegram. >>> import asyncio >>> from pprint import PrettyPrinter >>> from autotelegram.telegram.context import Context >>> >>> token = \"your-telegram-token\" >>> bot = Context ( token ) >>> pp = PrettyPrinter () >>> >>> async def main (): ... me = await bot . get_me () ... pp . pprint ( vars ( me )) ... >>> >>> asyncio . run ( main ()) you will get a print-out similar to the one in the first manual request. Though this time round, you'll only get a print-out of the actual user object JSON returned, without the ok element. The Context api supports all methods from telegram. The only difference is that they are formatted into snake case instead of the camel case from the actual telegram api. So that means getMe on the telegram bot api will be called as get_me on the context api. And sendMessage on the telegram bot api will be called as send_message on the context api. The context api interally parses the JSON result and returns a nice telegram object tree to easily interact with like we elaborated in the previous page. The application Whereas the context API provides a nice wrapper around the telegram bot API. It's also quite as low level as making requests manually. Indeed perhaps we will have to implement a loop which periodically makes request and handles the updates. Instead of doing that, autotelegram comes with an application class that implements the PollingApp . The PollingApp is responsible for making periodic requests to the bot api and calling a handler async function with each update that it receives. This greatly simplifies the development process, all you have to write is an async function callback to be called on each update. The application class manages the context API for us, so we still have to pass the Context to the application class. Here's how >>> from autotelegram.telegram.context import Context >>> from autotelegram.telegram.application import PollingApp >>> >>> token = \"your-telegram-token\" >>> context = Context ( token ) >>> bot = PollingApp ( context ) >>> >>> async def main ( update , context ): ... print ( \"received update: \" , update . update_id ) ... >>> bot . run ( main ) The application will start a loop calling main on every update it gets. the callback fuction to pass to the run method should be an async function with a signature of async callback (update,context): The update is the update object received and the context is the encapsulation of the bot and the context API. The application class provides us a way of easily customizing responses to certain requests, error handling and so much much more that we shall explore later in the documentation.","title":"Making requests"},{"location":"user-guide/making-requests/#overview","text":"Telegram provides an HTTP based API to interact with the bot. You can send GET or POST requests to the API to pass instructions to the bot and receive back success data if the request was successful or JSON error data if the request was not successful.","title":"Overview"},{"location":"user-guide/making-requests/#getting-token","text":"Telegram provides a url of the form https://api.telegram.org/bot<TOKEN>/ to interact with your bot. <TOKEN> is your unique token identifying your bot. You can get this token from the botfather telegram bot which is used to create telegram bots. You can follow instruction here to create your bot and get a token.","title":"Getting token"},{"location":"user-guide/making-requests/#making-requests","text":"With a token, we can now manually interact with our bot. Let us test and see. >>> from urllib.request import urlopen >>> from pprint import PrettyPrinter >>> import json >>> token = \"your-telegram-token\" >>> api_url = \"https://api.telegram.org/bot\" >>> bot_api_url = api_url + token >>> >>> pp = PrettyPrinter () >>> with urlopen ( bot_api_url + \"/getMe\" ) as f : ... pp . pprint ( json . loads ( f . read () . decode ())) ... The getMe method returns a User object describing the bot. you'll see a pretty printed result of the request which describes your bot. It will look something like { \"ok\" : true , \"result\" :{ \"id\" : 5083423735 , \"is_bot\" : true , \"first_name\" : \"Sanyu\" , \"username\" : \"OscaKampBot\" , \"can_join_groups\" : true , \"can_read_all_group_messages\" : false , \"supports_inline_queries\" : false }}","title":"Making requests"},{"location":"user-guide/making-requests/#the-context-api","text":"However, working with a telegram bot this way can be very tedious and time consuming. You'll have to account for network failures, parsing different kinds of results, handling request data such forms and multimedia and so many other things you'll have to build from scratch to have a decently functioning bot. Autotelegram builds a nice async wrapper over the bot api and encapsulates all the telegram methods in a Context object. The Context object now becomes the representation of our telegram bot to us. We can interact with the bot via calling methods on the Context api which will make reliable requests for us under the hood and also manage the network connection, parsing of various data and so on. Here's how we would rewrite the above example with the Context object from autotelegram. >>> import asyncio >>> from pprint import PrettyPrinter >>> from autotelegram.telegram.context import Context >>> >>> token = \"your-telegram-token\" >>> bot = Context ( token ) >>> pp = PrettyPrinter () >>> >>> async def main (): ... me = await bot . get_me () ... pp . pprint ( vars ( me )) ... >>> >>> asyncio . run ( main ()) you will get a print-out similar to the one in the first manual request. Though this time round, you'll only get a print-out of the actual user object JSON returned, without the ok element. The Context api supports all methods from telegram. The only difference is that they are formatted into snake case instead of the camel case from the actual telegram api. So that means getMe on the telegram bot api will be called as get_me on the context api. And sendMessage on the telegram bot api will be called as send_message on the context api. The context api interally parses the JSON result and returns a nice telegram object tree to easily interact with like we elaborated in the previous page.","title":"The context api"},{"location":"user-guide/making-requests/#the-application","text":"Whereas the context API provides a nice wrapper around the telegram bot API. It's also quite as low level as making requests manually. Indeed perhaps we will have to implement a loop which periodically makes request and handles the updates. Instead of doing that, autotelegram comes with an application class that implements the PollingApp . The PollingApp is responsible for making periodic requests to the bot api and calling a handler async function with each update that it receives. This greatly simplifies the development process, all you have to write is an async function callback to be called on each update. The application class manages the context API for us, so we still have to pass the Context to the application class. Here's how >>> from autotelegram.telegram.context import Context >>> from autotelegram.telegram.application import PollingApp >>> >>> token = \"your-telegram-token\" >>> context = Context ( token ) >>> bot = PollingApp ( context ) >>> >>> async def main ( update , context ): ... print ( \"received update: \" , update . update_id ) ... >>> bot . run ( main ) The application will start a loop calling main on every update it gets. the callback fuction to pass to the run method should be an async function with a signature of async callback (update,context): The update is the update object received and the context is the encapsulation of the bot and the context API. The application class provides us a way of easily customizing responses to certain requests, error handling and so much much more that we shall explore later in the documentation.","title":"The application"},{"location":"user-guide/messages/","text":"Messages are one of the central concepts in telegram. since telegram is a messaging application, a lot of updates passed to telegram bots come as message objects. Message objects represent any text, video, image, voice-note, document or any other form of data being exchanged on telegram. However, telegram adds other features for bots to make messages more expressive on the telegram client. Attributes The Message object has the most attributes of any telegram object, it contains a message_id to uniquely identify that message in a given chat, has message_thread_id to show the exact forum topic the message was sent to (that is if the group has forum topics set), has text attribute which contains the text that we have received from the user via the bot interaction and so many other attributes we can query to determine the origin and state of the message. >>> message = update . message >>> message . message_id 749248928 >>> message . text \"/start\" You can view a complete list of the message attributes over at the reference pages here . Methods respond Other than just querying message objects for their state and data, we can also manipulate messages to offer responses or replies. Using the respond_with_text method, we can respond to any message with a text message. All methods that require sending and receiving data to and from telegram are async and require to be awaited on. from autotelegram.telegram.context import Context from autotelegram.telegram.application import PollingApp TOKEN = \"token-for-the-bot\" ctx = Context ( TOKEN ) app = PollingApp ( ctx ) async def main ( update , ctx ): message = update . message text = \"Thanks for contacting health-line, how can we help?\" await message . respond_with_text ( text ) if __name__ == \"__main__\" : app . run ( main ) reply We can also reply to messages directly in the chat using the reply_with_text method. async def main ( update , ctx ): message = update . message text = \"Thanks for contacting health-line, how can we help?\" await message . reply_with_text ( text ) if __name__ == \"__main__\" : app . run ( main ) replace We can also replace a sent message with a new message. This is very useful in cases where you wouldn't want to constantly send messages to the user. You can just replace an already sent message with a new one. For example, a user viewing a menu by a certain restaurant doesn't need to be sent messages for every item on the menu, the message containing the menu list can constantly be updated as the client browses through the options. This creates an illusion of swiping in some case. To replace a message, you can use replace_with_text method. async def main ( update , ctx ): message = update . message text = \"Thanks for contacting health-line, how can we help?\" await message . respond_with_text ( text ) await asyncio . sleep ( 2 ) await message . replace_with_text ( \"original text has been replaced.\" ) if __name__ == \"__main__\" : app . run ( main ) delete You can also entirely delete messages from telegram. To do this, use the delete_message method async def main ( update , ctx ): message = update . message text = \"Thanks for contacting health-line, how can we help?\" await message . respond_with_text ( text ) await asyncio . sleep ( 2 ) await message . delete_message () if __name__ == \"__main__\" : app . run ( main ) sending keyboards Telegram has a concept of \"keyboards\", these are custom input interfaces that telegram clients create on the bot's behalf to replace direct text input with predefined options sent by the bot. You can read more about keyboards here . Autotelegram helps you easily create and send keyboards along with your messages. There are 2 kinds of keyboards, The Inline Keyboard and Reply Keyboard. Let's check the Inline Keyboard first. Inline Keyboards Telegram has a feature called Inline Keyboard. These are a set of options sent along with a telegram message to a user or client. To create an Inline Keyboard, we import the InlineKeyboardMarkup class. from autotelegram.telegram.objects import InlineKeyboardMarkup as keyboard We can then create an instance of the keyboard. InlineKeyboardMarkup supports creation of \"stack\" or \"grid\" shaped keybaords depending on the first argument you pass the constructor during instantiation. By default, it will create a stack keyboard. kb = keyboard ( \"stack\" ) We can now add buttons to the keyboard which will be arranged in a stack. kb . add_button ( \"minor\" , callback_data = \"min\" ) kb . add_button ( \"moderate\" , callback_data = \"mod\" ) kb . add_button ( \"major\" , callback_data = \"maj\" ) kb . add_button ( \"severe\" , callback_data = \"sev\" ) We have now added 4 buttons to our keyboard. The buttons are represented by InlineKeyboardButton and they take in a couple of optional parameters. One of the parameters is callback_data . This is data that shall be sent back to us when a user taps that button in the keyboard options. Other parameters include url , web_app and others. Please refer to the reference here for more information. To render out or keyboard, we use the keyboard() method. It will output a list representation of the keyboard. kb . keyboard () Now we can send this keyboard of options to the user. Let's try. from autotelegram.telegram.context import Context from autotelegram.telegram.application import PollingApp from autotelegram.telegram.objects import InlineKeyboardMarkup as keyboard TOKEN = \"token-for-the-bot\" ctx = Context ( TOKEN ) app = PollingApp ( ctx ) kb = keyboard ( \"stack\" ) kb . add_button ( \"minor\" , callback_data = \"min\" ) kb . add_button ( \"moderate\" , callback_data = \"mod\" ) kb . add_button ( \"major\" , callback_data = \"maj\" ) kb . add_button ( \"severe\" , callback_data = \"sev\" ) kb_rep = kb . keyboard () async def main ( update , ctx ): message = update . message text = \"Thanks for contacting health-line, could you rate your pain? \" await message . respond_with_text ( text , reply_markup = kb_rep ) if __name__ == \"__main__\" : app . run ( main ) So our user will receive a message along with a keyboard of options asking them to rate their pain. Receiving data from Inline keyboard If we sent callback_data along with the keyboard, we shall receive a CallbackQuery object once the user taps one of the button options. The CallbackQuery contains the data that we sent earlier so we can identify which button the user pressed. More on the CallbackQuery object here . We can extend the bot to respond to the user after they've tapped on one of our buttons. from autotelegram.telegram.context import Context from autotelegram.telegram.application import PollingApp from autotelegram.telegram.objects import InlineKeyboardMarkup as keyboard TOKEN = \"token-for-the-bot\" ctx = Context ( TOKEN ) app = PollingApp ( ctx ) kb = keyboard ( \"stack\" ) kb . add_button ( \"minor\" , callback_data = \"min\" ) kb . add_button ( \"moderate\" , callback_data = \"mod\" ) kb . add_button ( \"major\" , callback_data = \"maj\" ) kb . add_button ( \"severe\" , callback_data = \"sev\" ) kb_rep = kb . keyboard () async def main ( update , ctx ): typ , obj = update . get_object () if typ == \"message\" : text = \"Thanks for contacting health-line, could you rate your pain?\" await obj . respond_with_text ( text , reply_markup = kb_rep ) elif typ == \"callback_query\" : match obj . data : case \"min\" : await obj . answer ( text = \"your case is mild\" ) case \"mod\" : await obj . answer ( text = \"your case is moderate\" ) case \"maj\" : await obj . answer ( text = \"your case is major\" ) case \"sev\" : await obj . answer ( text = \"your case is severe\" ) if __name__ == \"__main__\" : app . run ( main ) This will respond with a noification to the user telling them \"your case is *\" conclusion That is a brief on how to work with messages using autotelegram. For more details, browse through the rest of the documenation.","title":"Working with messages"},{"location":"user-guide/messages/#attributes","text":"The Message object has the most attributes of any telegram object, it contains a message_id to uniquely identify that message in a given chat, has message_thread_id to show the exact forum topic the message was sent to (that is if the group has forum topics set), has text attribute which contains the text that we have received from the user via the bot interaction and so many other attributes we can query to determine the origin and state of the message. >>> message = update . message >>> message . message_id 749248928 >>> message . text \"/start\" You can view a complete list of the message attributes over at the reference pages here .","title":"Attributes"},{"location":"user-guide/messages/#methods","text":"","title":"Methods"},{"location":"user-guide/messages/#respond","text":"Other than just querying message objects for their state and data, we can also manipulate messages to offer responses or replies. Using the respond_with_text method, we can respond to any message with a text message. All methods that require sending and receiving data to and from telegram are async and require to be awaited on. from autotelegram.telegram.context import Context from autotelegram.telegram.application import PollingApp TOKEN = \"token-for-the-bot\" ctx = Context ( TOKEN ) app = PollingApp ( ctx ) async def main ( update , ctx ): message = update . message text = \"Thanks for contacting health-line, how can we help?\" await message . respond_with_text ( text ) if __name__ == \"__main__\" : app . run ( main )","title":"respond"},{"location":"user-guide/messages/#reply","text":"We can also reply to messages directly in the chat using the reply_with_text method. async def main ( update , ctx ): message = update . message text = \"Thanks for contacting health-line, how can we help?\" await message . reply_with_text ( text ) if __name__ == \"__main__\" : app . run ( main )","title":"reply"},{"location":"user-guide/messages/#replace","text":"We can also replace a sent message with a new message. This is very useful in cases where you wouldn't want to constantly send messages to the user. You can just replace an already sent message with a new one. For example, a user viewing a menu by a certain restaurant doesn't need to be sent messages for every item on the menu, the message containing the menu list can constantly be updated as the client browses through the options. This creates an illusion of swiping in some case. To replace a message, you can use replace_with_text method. async def main ( update , ctx ): message = update . message text = \"Thanks for contacting health-line, how can we help?\" await message . respond_with_text ( text ) await asyncio . sleep ( 2 ) await message . replace_with_text ( \"original text has been replaced.\" ) if __name__ == \"__main__\" : app . run ( main )","title":"replace"},{"location":"user-guide/messages/#delete","text":"You can also entirely delete messages from telegram. To do this, use the delete_message method async def main ( update , ctx ): message = update . message text = \"Thanks for contacting health-line, how can we help?\" await message . respond_with_text ( text ) await asyncio . sleep ( 2 ) await message . delete_message () if __name__ == \"__main__\" : app . run ( main )","title":"delete"},{"location":"user-guide/messages/#sending-keyboards","text":"Telegram has a concept of \"keyboards\", these are custom input interfaces that telegram clients create on the bot's behalf to replace direct text input with predefined options sent by the bot. You can read more about keyboards here . Autotelegram helps you easily create and send keyboards along with your messages. There are 2 kinds of keyboards, The Inline Keyboard and Reply Keyboard. Let's check the Inline Keyboard first.","title":"sending keyboards"},{"location":"user-guide/messages/#inline-keyboards","text":"Telegram has a feature called Inline Keyboard. These are a set of options sent along with a telegram message to a user or client. To create an Inline Keyboard, we import the InlineKeyboardMarkup class. from autotelegram.telegram.objects import InlineKeyboardMarkup as keyboard We can then create an instance of the keyboard. InlineKeyboardMarkup supports creation of \"stack\" or \"grid\" shaped keybaords depending on the first argument you pass the constructor during instantiation. By default, it will create a stack keyboard. kb = keyboard ( \"stack\" ) We can now add buttons to the keyboard which will be arranged in a stack. kb . add_button ( \"minor\" , callback_data = \"min\" ) kb . add_button ( \"moderate\" , callback_data = \"mod\" ) kb . add_button ( \"major\" , callback_data = \"maj\" ) kb . add_button ( \"severe\" , callback_data = \"sev\" ) We have now added 4 buttons to our keyboard. The buttons are represented by InlineKeyboardButton and they take in a couple of optional parameters. One of the parameters is callback_data . This is data that shall be sent back to us when a user taps that button in the keyboard options. Other parameters include url , web_app and others. Please refer to the reference here for more information. To render out or keyboard, we use the keyboard() method. It will output a list representation of the keyboard. kb . keyboard () Now we can send this keyboard of options to the user. Let's try. from autotelegram.telegram.context import Context from autotelegram.telegram.application import PollingApp from autotelegram.telegram.objects import InlineKeyboardMarkup as keyboard TOKEN = \"token-for-the-bot\" ctx = Context ( TOKEN ) app = PollingApp ( ctx ) kb = keyboard ( \"stack\" ) kb . add_button ( \"minor\" , callback_data = \"min\" ) kb . add_button ( \"moderate\" , callback_data = \"mod\" ) kb . add_button ( \"major\" , callback_data = \"maj\" ) kb . add_button ( \"severe\" , callback_data = \"sev\" ) kb_rep = kb . keyboard () async def main ( update , ctx ): message = update . message text = \"Thanks for contacting health-line, could you rate your pain? \" await message . respond_with_text ( text , reply_markup = kb_rep ) if __name__ == \"__main__\" : app . run ( main ) So our user will receive a message along with a keyboard of options asking them to rate their pain.","title":"Inline Keyboards"},{"location":"user-guide/messages/#receiving-data-from-inline-keyboard","text":"If we sent callback_data along with the keyboard, we shall receive a CallbackQuery object once the user taps one of the button options. The CallbackQuery contains the data that we sent earlier so we can identify which button the user pressed. More on the CallbackQuery object here . We can extend the bot to respond to the user after they've tapped on one of our buttons. from autotelegram.telegram.context import Context from autotelegram.telegram.application import PollingApp from autotelegram.telegram.objects import InlineKeyboardMarkup as keyboard TOKEN = \"token-for-the-bot\" ctx = Context ( TOKEN ) app = PollingApp ( ctx ) kb = keyboard ( \"stack\" ) kb . add_button ( \"minor\" , callback_data = \"min\" ) kb . add_button ( \"moderate\" , callback_data = \"mod\" ) kb . add_button ( \"major\" , callback_data = \"maj\" ) kb . add_button ( \"severe\" , callback_data = \"sev\" ) kb_rep = kb . keyboard () async def main ( update , ctx ): typ , obj = update . get_object () if typ == \"message\" : text = \"Thanks for contacting health-line, could you rate your pain?\" await obj . respond_with_text ( text , reply_markup = kb_rep ) elif typ == \"callback_query\" : match obj . data : case \"min\" : await obj . answer ( text = \"your case is mild\" ) case \"mod\" : await obj . answer ( text = \"your case is moderate\" ) case \"maj\" : await obj . answer ( text = \"your case is major\" ) case \"sev\" : await obj . answer ( text = \"your case is severe\" ) if __name__ == \"__main__\" : app . run ( main ) This will respond with a noification to the user telling them \"your case is *\"","title":"Receiving data from Inline keyboard"},{"location":"user-guide/messages/#conclusion","text":"That is a brief on how to work with messages using autotelegram. For more details, browse through the rest of the documenation.","title":"conclusion"},{"location":"user-guide/webhooks/","text":"","title":"Using Webhooks"}]}